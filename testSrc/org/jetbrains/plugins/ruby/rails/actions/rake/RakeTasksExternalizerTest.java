/*
 * Copyright 2000-2008 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.plugins.ruby.rails.actions.rake;

import org.jetbrains.plugins.ruby.Marker;
import org.jetbrains.plugins.ruby.rails.actions.rake.task.RakeTask;
import org.jetbrains.plugins.ruby.rails.actions.rake.task.RakeTaskSerializableImpl;
import org.jetbrains.plugins.ruby.rails.facet.RailsFacetUtil;
import org.jetbrains.plugins.ruby.ruby.cache.AbstractRubyModuleCacheTest;
import org.jetbrains.plugins.ruby.support.TestUtil;

import java.io.IOException;
import java.io.OutputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.List;

/**
 * Created by IntelliJ IDEA.
 *
 * @author: Roman Chernyatchik
 * @date: Nov 22, 2007
 */
public class RakeTasksExternalizerTest extends AbstractRubyModuleCacheTest {
    private RakeTasksExternalizer myRakeTasksExternalizer;

    //file: .rakeTasks
    private final String DATA_CONTENT = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<Settings><!--This file was automatically generated by Ruby plugin.\n" +
            "You are allowed to: \n" +
            "1. Remove rake task\n" +
            "2. Add existing rake tasks\n" +
            "To add existing rake tasks automatically delete this file and reload the project.\n" +
            "--><RakeGroup description=\"\" fullCmd=\"\" taksId=\"rake\"><RakeGroup description=\"\" fullCmd=\"\" taksId=\"db\"><RakeTask description=\"Migrate the database through scripts in db/migrate. Target specific version with VERSION=x. Turn off output with VERBOSE=false.\" fullCmd=\"db:migrate\" taksId=\"migrate\" /><RakeGroup description=\"\" fullCmd=\"\" taksId=\"structure\"><RakeTask description=\"Dump the database structure to a SQL file\" fullCmd=\"db:structure:dump\" taksId=\"dump\" /></RakeGroup><RakeGroup description=\"\" fullCmd=\"\" taksId=\"test\"><RakeTask description=\"Recreate the test database from the current environment's database schema\" fullCmd=\"db:test:clone\" taksId=\"clone\" /><RakeTask description=\"Recreate the test databases from the development structure\" fullCmd=\"db:test:clone_structure\" taksId=\"clone_structure\" /><RakeTask description=\"Prepare the test database and load the schema\" fullCmd=\"db:test:prepare\" taksId=\"prepare\" /><RakeTask description=\"Empty the test database\" fullCmd=\"db:test:purge\" taksId=\"purge\" /></RakeGroup></RakeGroup><RakeGroup description=\"\" fullCmd=\"\" taksId=\"rails\" /><RakeTask description=\"Report code statistics (KLOCs, etc) from the application\" fullCmd=\"stats\" taksId=\"stats\" /></RakeGroup></Settings>";


    protected void setUp() throws Exception {
        super.setUp();
        myRakeTasksExternalizer = new RakeTasksExternalizer();
    }

    protected String getRailsAppHome() {
        return DEFAULT_RAILS_APP_HOME;
    }

    public void testGetDataFile_WithoutContentRoots() {
        TestUtil.removeModuleContentRoots(myModule);

        assertNotNull(RakeTasksExternalizer.getDataFile(getRailsApplicationHomeDir()));
    }

    private String getRailsApplicationHomeDir() {
        return RailsFacetUtil.getRailsAppHomeDirPath(myModule); //RModuleUtil.getRubyModuleTypeRoot(myModule).getPath();
    }

    public void testSaveRakeTasksTree_WithoutContentRoots() {
        TestUtil.removeModuleContentRoots(myModule);
        final RakeTaskSerializableImpl rakeTaskRoot = new RakeTaskSerializableImpl("id", "", "", false, null);
        final Marker saveMarker = new Marker();
        myRakeTasksExternalizer = new RakeTasksExternalizer() {
            @SuppressWarnings({"UnusedDeclaration", "UnusedParameters"})
            public void saveRakeTasksTree(RakeTask rootTask, OutputStream outStream) {
                saveMarker.set();
            }
        };

        saveMarker.reset();
        myRakeTasksExternalizer.saveRakeTasksTree(rakeTaskRoot, getRailsApplicationHomeDir());

        assertFalse(saveMarker.isSet());
    }

    public void testLoadRakeTasksTree_WithoutContentRoots() {
        TestUtil.removeModuleContentRoots(myModule);

        assertNotNull(myRakeTasksExternalizer.loadRakeTasksTree(getRailsApplicationHomeDir()));
    }

    public void testSaveRakeTasksTree_FromReader() throws IOException {
        final StringWriter stringWriter = new StringWriter();

        final RakeTask testTasksRoot = myRakeTasksExternalizer.loadRakeTasksTree(new StringReader(DATA_CONTENT));
        myRakeTasksExternalizer.saveRakeTasksTree(testTasksRoot, stringWriter);
        stringWriter.flush();

        assertEquals(DATA_CONTENT, stringWriter.getBuffer().toString().trim().replace("\r", ""));
        stringWriter.close();
    }

    public void testLoadRakeTasksTree_FromFile() {
        assertNotNull(myRakeTasksExternalizer.loadRakeTasksTree(getRailsApplicationHomeDir()));

        final RakeTask task = myRakeTasksExternalizer.loadRakeTasksTree(getRailsApplicationHomeDir());

        assertNotNull(task);
        assertEquals(task.getId(), "rake");
        assertEquals(task.getSubTasks().size(), 3);
    }
    
    public void testLoadRakeTasksTree_FromReader() {
        //file: .rakeTasks
        final StringReader stringReader = new StringReader(DATA_CONTENT);
        final RakeTask task = myRakeTasksExternalizer.loadRakeTasksTree(stringReader);
        stringReader.close();

        //root
        assertNotNull(task);
        assertEquals(task.getId(), "rake");
        assertEquals(task.getFullCommand(), "");
        assertEquals(task.getDescription(), "");
        assertTrue(task.isGroup());
        final List<? extends RakeTask> subTasks = task.getSubTasks();
        assertEquals(subTasks.size(), 3);

        //db
        assertEquals(subTasks.get(0).getId(), "db");
        assertEquals(subTasks.get(0).getFullCommand(), "");
        assertEquals(subTasks.get(0).getDescription(), "");
        assertTrue(subTasks.get(0).isGroup());
        assertEquals(subTasks.get(0).getSubTasks().size(), 3);

        // db:migrate
        assertEquals(subTasks.get(0).getSubTasks().get(0).getId(), "migrate");
        assertEquals(subTasks.get(0).getSubTasks().get(0).getFullCommand(), "db:migrate");
        assertEquals(subTasks.get(0).getSubTasks().get(0).getDescription(), "Migrate the database through scripts in db/migrate. Target specific version with VERSION=x. Turn off output with VERBOSE=false.");
        assertFalse(subTasks.get(0).getSubTasks().get(0).isGroup());
        assertEquals(subTasks.get(0).getSubTasks().get(0).getSubTasks().size(), 0);

        // db:structure
        assertEquals(subTasks.get(0).getSubTasks().get(1).getId(), "structure");
        assertEquals(subTasks.get(0).getSubTasks().get(1).getFullCommand(), "");
        assertEquals(subTasks.get(0).getSubTasks().get(1).getDescription(), "");
        assertTrue(subTasks.get(0).getSubTasks().get(1).isGroup());
        assertEquals(subTasks.get(0).getSubTasks().get(1).getSubTasks().size(), 1);
        // db:structure:dump
        assertEquals(subTasks.get(0).getSubTasks().get(1).getSubTasks().get(0).getId(), "dump");
        assertEquals(subTasks.get(0).getSubTasks().get(1).getSubTasks().get(0).getFullCommand(), "db:structure:dump");
        assertEquals(subTasks.get(0).getSubTasks().get(1).getSubTasks().get(0).getDescription(), "Dump the database structure to a SQL file");
        assertFalse(subTasks.get(0).getSubTasks().get(1).getSubTasks().get(0).isGroup());
        assertEquals(subTasks.get(0).getSubTasks().get(1).getSubTasks().get(0).getSubTasks().size(), 0);

        // db:test
        assertEquals(subTasks.get(0).getSubTasks().get(2).getId(), "test");
        assertEquals(subTasks.get(0).getSubTasks().get(2).getFullCommand(), "");
        assertEquals(subTasks.get(0).getSubTasks().get(2).getDescription(), "");
        assertTrue(subTasks.get(0).getSubTasks().get(2).isGroup());
        assertEquals(subTasks.get(0).getSubTasks().get(2).getSubTasks().size(), 4);
        // db:test:clone
        assertEquals(subTasks.get(0).getSubTasks().get(2).getSubTasks().get(0).getId(), "clone");
        assertEquals(subTasks.get(0).getSubTasks().get(2).getSubTasks().get(0).getFullCommand(), "db:test:clone");
        assertEquals(subTasks.get(0).getSubTasks().get(2).getSubTasks().get(0).getDescription(), "Recreate the test database from the current environment's database schema");
        assertFalse(subTasks.get(0).getSubTasks().get(2).getSubTasks().get(0).isGroup());
        assertEquals(subTasks.get(0).getSubTasks().get(2).getSubTasks().get(0).getSubTasks().size(), 0);
        // db:test:purge
        assertEquals(subTasks.get(0).getSubTasks().get(2).getSubTasks().get(3).getId(), "purge");
        assertEquals(subTasks.get(0).getSubTasks().get(2).getSubTasks().get(3).getFullCommand(), "db:test:purge");
        assertEquals(subTasks.get(0).getSubTasks().get(2).getSubTasks().get(3).getDescription(), "Empty the test database");
        assertFalse(subTasks.get(0).getSubTasks().get(2).getSubTasks().get(3).isGroup());
        assertEquals(subTasks.get(0).getSubTasks().get(2).getSubTasks().get(3).getSubTasks().size(), 0);

        //rails
        assertEquals(subTasks.get(1).getId(), "rails");
        assertEquals(subTasks.get(1).getFullCommand(), "");
        assertEquals(subTasks.get(1).getDescription(), "");
        assertTrue(subTasks.get(1).isGroup());
        assertEquals(subTasks.get(1).getSubTasks().size(), 0);

        //stats
        assertEquals(subTasks.get(2).getId(), "stats");
        assertEquals(subTasks.get(2).getFullCommand(), "stats");
        assertEquals(subTasks.get(2).getDescription(), "Report code statistics (KLOCs, etc) from the application");
        assertFalse(subTasks.get(2).isGroup());
        assertEquals(subTasks.get(2).getSubTasks().size(), 0);
    }
}
