/* The following code was generated by JFlex 1.4.1 on 24.09.13 23:46 */

package org.jetbrains.plugins.ruby.ruby.lang.lexer;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.plugins.ruby.ruby.lang.TextUtil;
import org.jetbrains.plugins.ruby.ruby.lang.lexer.managers.ContentManager;
import org.jetbrains.plugins.ruby.ruby.lang.lexer.managers.HeredocsManager;
import org.jetbrains.plugins.ruby.ruby.lang.lexer.managers.StatesManager;
import org.jetbrains.plugins.ruby.ruby.lang.lexer.managers.TokensManager;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

/* Auto generated File */
@SuppressWarnings({"AccessStaticViaInstance", "FieldCanBeLocal", "UnusedAssignment", "JavaDoc", "UnusedDeclaration", "SimplifiableIfStatement", "ConstantConditions"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 24.09.13 23:46 from the specification file
 * <tt>./ruby.flex</tt>
 */
public class _RubyLexer implements FlexLexer, RubyTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SPECIAL_STATE = 2;
  public static final int IN_WORDS_STATE = 10;
  public static final int IN_NI_STRING_STATE = 18;
  public static final int IN_EXPR_SUBT_STATE = 4;
  public static final int IN_REGEXP_STATE = 14;
  public static final int IN_STRING_STATE = 16;
  public static final int YYINITIAL = 0;
  public static final int IN_NI_WORDS_STATE = 12;
  public static final int IN_HEREDOC_STATE = 20;
  public static final int IN_BLOCK_COMMENT_STATE = 8;
  public static final int IN_VAR_SUBT_STATE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  0,  1,  2,  3,  4,  4,  5,  6,  7,  7,  8,  8,  9,  9, 
    10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\2\3\1\1\22\0\1\71\1\42\1\52\1\5"+
    "\1\40\1\120\1\66\1\70\1\114\1\116\1\41\1\24\1\45\1\20"+
    "\1\22\1\43\1\12\1\11\6\10\2\6\1\47\1\44\1\50\1\46"+
    "\1\51\1\16\1\37\1\14\1\13\1\17\1\102\1\23\1\55\1\106"+
    "\1\25\1\57\1\25\1\60\1\113\1\21\1\101\2\25\1\121\5\25"+
    "\1\123\1\15\2\25\1\115\1\4\1\117\1\125\1\7\1\67\1\53"+
    "\1\26\1\72\1\54\1\31\1\27\1\103\1\105\1\56\1\32\1\107"+
    "\1\61\1\111\1\73\1\110\1\62\1\122\1\74\1\75\1\76\1\104"+
    "\1\63\1\64\1\30\1\112\1\32\1\77\1\124\1\100\1\65\u0391\0"+
    "\1\36\5\0\1\33\7\0\1\34\1\35\ufbe0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\2\1\6\0\1\2\1\3\1\4\1\3\1\2"+
    "\1\5\1\6\1\7\1\6\2\10\1\11\1\12\1\13"+
    "\1\10\1\14\4\7\3\2\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\4\7\1\27"+
    "\1\30\1\31\1\32\5\7\1\33\1\34\4\7\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\22\1\44"+
    "\1\45\2\0\2\1\4\46\2\47\4\50\4\51\2\52"+
    "\4\53\2\54\3\0\1\7\2\55\1\56\2\6\1\10"+
    "\1\55\1\57\2\6\1\60\1\61\1\62\1\63\1\10"+
    "\1\64\1\65\6\7\1\0\1\66\2\0\1\67\1\70"+
    "\2\67\1\71\1\0\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\3\7\1\110\1\111\1\112\1\7\1\113\1\114"+
    "\1\115\13\7\1\116\2\7\1\117\2\120\1\0\1\121"+
    "\5\0\1\122\1\123\1\124\1\0\1\125\2\0\1\126"+
    "\1\127\2\126\1\130\1\0\1\1\3\131\1\132\1\133"+
    "\2\0\1\133\2\0\1\6\1\62\1\0\4\7\2\6"+
    "\2\10\1\6\5\0\1\134\1\135\3\7\1\136\1\7"+
    "\1\137\1\7\2\0\1\140\2\0\1\141\1\142\1\143"+
    "\1\144\2\0\1\145\2\0\1\146\1\7\1\147\1\150"+
    "\2\7\1\151\3\7\1\152\1\153\14\7\1\154\2\155"+
    "\2\156\2\157\2\160\2\161\2\162\1\163\2\0\1\164"+
    "\2\0\1\1\1\165\1\0\1\131\3\165\1\133\1\0"+
    "\1\133\1\0\3\7\2\0\1\10\1\6\2\0\1\6"+
    "\1\62\3\7\1\166\2\7\1\10\6\0\2\7\1\167"+
    "\1\7\1\170\1\7\1\171\1\172\3\7\1\173\1\7"+
    "\1\174\1\175\5\7\4\0\1\176\1\0\1\133\1\62"+
    "\3\7\1\177\3\6\1\200\1\201\1\202\1\203\1\7"+
    "\1\66\2\0\1\144\1\204\1\7\1\205\1\206\1\7"+
    "\1\207\1\7\1\210\1\211\1\7\1\212\1\7\1\213"+
    "\1\0\1\125\1\0\2\176\1\0\3\7\2\0\1\214"+
    "\1\140\1\7\1\215\1\216\1\217\1\220\1\221\1\164"+
    "\1\222\2\7\1\0\1\7\1\222\1\223\1\224\1\225";

  private static int [] zzUnpackAction() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\u02b0\0\u0306\0\u035c\0\u03b2\0\u0408\0\u045e\0\u04b4\0\u045e"+
    "\0\u050a\0\u0560\0\u05b6\0\u060c\0\u0662\0\u06b8\0\u070e\0\u0764"+
    "\0\u07ba\0\u0810\0\u0866\0\u08bc\0\u0912\0\u0968\0\u09be\0\u0a14"+
    "\0\u0a6a\0\u0ac0\0\u0b16\0\u0b6c\0\u0bc2\0\u0c18\0\u0c6e\0\u045e"+
    "\0\u045e\0\u0cc4\0\u0d1a\0\u0d70\0\u0dc6\0\u045e\0\u0e1c\0\u0e72"+
    "\0\u0ec8\0\u0f1e\0\u0f74\0\u0fca\0\u045e\0\u045e\0\u1020\0\u1076"+
    "\0\u10cc\0\u1122\0\u1178\0\u045e\0\u045e\0\u11ce\0\u1224\0\u127a"+
    "\0\u12d0\0\u045e\0\u1326\0\u045e\0\u045e\0\u137c\0\u13d2\0\u1428"+
    "\0\u147e\0\u045e\0\u045e\0\u14d4\0\u152a\0\u045e\0\u1580\0\u045e"+
    "\0\u15d6\0\u162c\0\u1682\0\u045e\0\u16d8\0\u045e\0\u172e\0\u162c"+
    "\0\u1682\0\u045e\0\u1784\0\u17da\0\u1682\0\u045e\0\u1830\0\u045e"+
    "\0\u1886\0\u162c\0\u1682\0\u18dc\0\u045e\0\u1932\0\u1988\0\u19de"+
    "\0\u1a34\0\u045e\0\u1a8a\0\u1ae0\0\u1b36\0\u1b8c\0\u1be2\0\u1c38"+
    "\0\u1c8e\0\u045e\0\u1ce4\0\u045e\0\u045e\0\u1d3a\0\u1d90\0\u1de6"+
    "\0\u045e\0\u045e\0\u1e3c\0\u1e92\0\u1ee8\0\u1f3e\0\u1f94\0\u1fea"+
    "\0\u2040\0\u2096\0\u20ec\0\u2142\0\u045e\0\u2198\0\u21ee\0\u2244"+
    "\0\u045e\0\u229a\0\u22f0\0\u045e\0\u045e\0\u045e\0\u045e\0\u2346"+
    "\0\u045e\0\u045e\0\u045e\0\u045e\0\u239c\0\u23f2\0\u045e\0\u2448"+
    "\0\u249e\0\u24f4\0\u254a\0\u0a14\0\u0a14\0\u0a14\0\u25a0\0\u045e"+
    "\0\u045e\0\u25f6\0\u264c\0\u26a2\0\u26f8\0\u274e\0\u27a4\0\u27fa"+
    "\0\u2850\0\u28a6\0\u28fc\0\u2952\0\u29a8\0\u0a14\0\u29fe\0\u2a54"+
    "\0\u2aaa\0\u045e\0\u2b00\0\u2b56\0\u045e\0\u2bac\0\u2c02\0\u2c58"+
    "\0\u2cae\0\u2d04\0\u045e\0\u2d5a\0\u045e\0\u2db0\0\u2e06\0\u2e5c"+
    "\0\u2eb2\0\u045e\0\u2f08\0\u2f5e\0\u2fb4\0\u045e\0\u300a\0\u3060"+
    "\0\u045e\0\u30b6\0\u310c\0\u045e\0\u3162\0\u31b8\0\u320e\0\u045e"+
    "\0\u3264\0\u32ba\0\u3310\0\u3366\0\u33bc\0\u3412\0\u3468\0\u34be"+
    "\0\u045e\0\u3514\0\u356a\0\u35c0\0\u045e\0\u3616\0\u366c\0\u36c2"+
    "\0\u3718\0\u376e\0\u37c4\0\u045e\0\u0764\0\u381a\0\u3870\0\u38c6"+
    "\0\u0a14\0\u391c\0\u0a14\0\u3972\0\u39c8\0\u3a1e\0\u3a74\0\u3aca"+
    "\0\u3b20\0\u045e\0\u045e\0\u045e\0\u3b76\0\u3bcc\0\u3c22\0\u045e"+
    "\0\u3c78\0\u3cce\0\u045e\0\u3d24\0\u0a14\0\u3d7a\0\u3dd0\0\u3e26"+
    "\0\u045e\0\u3e7c\0\u3ed2\0\u3f28\0\u0a14\0\u0a14\0\u3f7e\0\u3fd4"+
    "\0\u402a\0\u4080\0\u40d6\0\u412c\0\u4182\0\u41d8\0\u422e\0\u4284"+
    "\0\u42da\0\u4330\0\u045e\0\u045e\0\u4386\0\u045e\0\u43dc\0\u045e"+
    "\0\u4432\0\u045e\0\u4488\0\u045e\0\u44de\0\u045e\0\u4534\0\u045e"+
    "\0\u458a\0\u45e0\0\u4636\0\u468c\0\u46e2\0\u4738\0\u478e\0\u47e4"+
    "\0\u483a\0\u045e\0\u4890\0\u48e6\0\u493c\0\u4992\0\u49e8\0\u4a3e"+
    "\0\u4a94\0\u4aea\0\u4b40\0\u4b96\0\u4bec\0\u4c42\0\u4c98\0\u4cee"+
    "\0\u4d44\0\u4d9a\0\u4df0\0\u4e46\0\u4e9c\0\u4ef2\0\u0a14\0\u4f48"+
    "\0\u4f9e\0\u4ff4\0\u504a\0\u50a0\0\u50f6\0\u514c\0\u51a2\0\u51f8"+
    "\0\u524e\0\u52a4\0\u0a14\0\u52fa\0\u0a14\0\u5350\0\u0a14\0\u0a14"+
    "\0\u53a6\0\u53fc\0\u5452\0\u0a14\0\u54a8\0\u0a14\0\u0a14\0\u54fe"+
    "\0\u5554\0\u55aa\0\u5600\0\u5656\0\u56ac\0\u5702\0\u5758\0\u57ae"+
    "\0\u5804\0\u585a\0\u31b8\0\u33bc\0\u58b0\0\u5906\0\u595c\0\u0764"+
    "\0\u59b2\0\u5a08\0\u5a5e\0\u0a14\0\u0a14\0\u0a14\0\u0a14\0\u5ab4"+
    "\0\u045e\0\u5b0a\0\u5b60\0\u045e\0\u0a14\0\u5bb6\0\u0a14\0\u0a14"+
    "\0\u5c0c\0\u0a14\0\u5c62\0\u0a14\0\u0a14\0\u5cb8\0\u0a14\0\u5d0e"+
    "\0\u0a14\0\u5d64\0\u045e\0\u5dba\0\u5804\0\u045e\0\u5e10\0\u5e66"+
    "\0\u5ebc\0\u5f12\0\u5a5e\0\u5f68\0\u0a14\0\u045e\0\u5fbe\0\u0a14"+
    "\0\u0a14\0\u0a14\0\u0a14\0\u045e\0\u045e\0\u6014\0\u606a\0\u60c0"+
    "\0\u6116\0\u616c\0\u61c2\0\u0a14\0\u0a14\0\u045e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\2\24\1\26\1\27\2\30\1\31\1\30\1\32\1\30"+
    "\1\33\1\34\1\35\1\30\1\36\1\37\1\40\1\41"+
    "\1\40\1\42\3\16\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\30\1\61\2\30\3\40\1\62\1\63\1\64"+
    "\1\65\1\66\1\21\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\2\30\1\40\1\76\1\40\1\30\1\40"+
    "\1\77\1\100\1\101\1\30\1\102\1\103\1\104\1\105"+
    "\1\106\1\30\1\40\1\30\1\107\1\110\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\24\1\26"+
    "\1\27\2\30\1\31\1\30\1\32\1\30\1\33\1\34"+
    "\1\35\1\30\1\36\1\37\1\40\1\41\1\40\1\42"+
    "\3\16\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\111\1\53\1\54\1\55\1\56\1\57\1\60\1\30"+
    "\1\61\2\30\3\40\1\62\1\63\1\64\1\65\1\66"+
    "\1\21\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\2\30\1\40\1\76\1\40\1\30\1\40\1\77\1\100"+
    "\1\101\1\30\1\102\1\103\1\104\1\105\1\106\1\30"+
    "\1\40\1\30\1\107\1\110\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\2\24\1\26\1\27\2\30"+
    "\1\31\1\30\1\32\1\30\1\33\1\34\1\35\1\30"+
    "\1\36\1\37\1\40\1\41\1\40\1\42\3\16\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\30\1\61\2\30"+
    "\3\40\1\62\1\63\1\64\1\65\1\66\1\21\1\67"+
    "\1\70\1\71\1\72\1\73\1\112\1\113\2\30\1\40"+
    "\1\76\1\40\1\30\1\40\1\77\1\100\1\101\1\30"+
    "\1\102\1\103\1\104\1\105\1\106\1\30\1\40\1\30"+
    "\1\107\1\110\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\2\24\1\26\1\27\2\30\1\31\1\30"+
    "\1\32\1\30\1\33\1\34\1\35\1\30\1\36\1\37"+
    "\1\40\1\41\1\40\1\42\3\16\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\111\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\30\1\61\2\30\3\40\1\62"+
    "\1\63\1\64\1\65\1\66\1\21\1\67\1\70\1\71"+
    "\1\72\1\73\1\112\1\113\2\30\1\40\1\76\1\40"+
    "\1\30\1\40\1\77\1\100\1\101\1\30\1\102\1\103"+
    "\1\104\1\105\1\106\1\30\1\40\1\30\1\107\1\110"+
    "\37\0\1\114\1\115\65\0\2\6\1\116\125\6\1\116"+
    "\43\6\1\117\57\6\1\120\1\121\2\120\1\122\1\123"+
    "\120\120\1\124\1\125\124\124\1\126\1\127\2\126\1\130"+
    "\1\131\120\126\1\132\1\133\2\132\1\134\1\135\120\132"+
    "\1\136\1\137\124\136\1\140\1\141\2\140\1\142\1\143"+
    "\120\140\127\0\1\21\1\20\1\21\65\0\1\21\35\0"+
    "\1\21\1\0\1\21\65\0\1\21\35\0\1\144\1\145"+
    "\123\0\2\23\1\0\123\23\6\0\1\24\1\146\3\24"+
    "\7\0\1\147\1\150\5\0\1\150\102\0\1\40\1\151"+
    "\6\40\1\152\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\6\40\7\0\1\153\3\0\1\154\4\0\12\40\5\0"+
    "\5\40\2\0\13\40\5\0\3\40\10\0\1\24\1\146"+
    "\3\24\1\155\1\0\1\156\4\0\1\147\1\150\2\0"+
    "\1\155\1\0\1\156\1\150\102\0\10\30\1\152\1\30"+
    "\1\0\1\30\1\0\1\157\1\0\6\30\7\0\1\160"+
    "\3\0\1\161\4\0\12\30\5\0\5\30\2\0\13\30"+
    "\5\0\3\30\10\0\10\30\1\152\1\30\1\0\1\30"+
    "\1\0\1\30\1\0\6\30\7\0\1\160\3\0\1\161"+
    "\4\0\12\30\5\0\5\30\2\0\13\30\5\0\3\30"+
    "\2\0\1\162\3\0\1\163\64\162\1\0\34\162\37\0"+
    "\1\164\6\0\1\165\65\0\1\166\1\0\3\166\7\0"+
    "\1\167\111\0\10\30\1\152\1\30\1\0\1\30\1\0"+
    "\1\30\1\0\6\30\7\0\1\160\3\0\1\161\4\0"+
    "\12\30\5\0\5\30\2\0\1\170\12\30\5\0\3\30"+
    "\41\0\1\171\6\0\1\172\65\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\4\40\1\173\1\40"+
    "\7\0\1\153\3\0\1\154\4\0\12\40\5\0\2\40"+
    "\1\174\2\40\2\0\13\40\5\0\3\40\10\0\10\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\6\40"+
    "\7\0\1\153\3\0\1\154\4\0\1\175\11\40\5\0"+
    "\5\40\2\0\7\40\1\176\3\40\5\0\3\40\10\0"+
    "\10\40\1\152\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\6\40\7\0\1\153\3\0\1\154\4\0\12\40\5\0"+
    "\5\40\2\0\13\40\5\0\3\40\10\0\10\40\1\152"+
    "\1\40\1\0\1\40\1\0\1\40\1\0\6\40\7\0"+
    "\1\153\3\0\1\154\4\0\6\40\1\177\3\40\5\0"+
    "\1\40\1\200\3\40\2\0\13\40\5\0\3\40\36\0"+
    "\1\201\100\0\1\202\3\0\3\202\1\0\1\202\1\0"+
    "\1\202\1\0\1\202\1\0\6\202\1\203\3\0\1\204"+
    "\13\0\12\202\5\0\5\202\2\0\13\202\5\0\3\202"+
    "\6\0\1\205\1\0\1\206\1\207\3\206\3\207\1\205"+
    "\1\207\1\210\1\207\1\205\1\207\1\211\6\207\1\212"+
    "\3\0\14\205\12\207\4\211\1\0\5\207\2\0\13\207"+
    "\5\0\3\207\43\0\1\213\4\0\1\214\125\0\1\215"+
    "\16\0\1\216\106\0\1\217\125\0\1\220\2\0\1\221"+
    "\13\0\1\222\40\0\1\223\3\0\43\223\1\224\21\223"+
    "\1\0\34\223\46\0\1\225\1\0\1\226\123\0\1\227"+
    "\2\0\1\230\62\0\10\40\1\152\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\6\40\7\0\1\153\3\0\1\154"+
    "\4\0\6\40\1\231\3\40\5\0\1\40\1\232\3\40"+
    "\2\0\13\40\5\0\3\40\10\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\4\40\1\233\1\40"+
    "\7\0\1\153\3\0\1\154\4\0\12\40\5\0\5\40"+
    "\2\0\7\40\1\234\3\40\5\0\3\40\10\0\10\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\2\40"+
    "\1\235\3\40\7\0\1\153\3\0\1\154\4\0\12\40"+
    "\5\0\1\40\1\236\3\40\2\0\13\40\5\0\3\40"+
    "\10\0\10\40\1\152\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\6\40\7\0\1\153\3\0\1\154\4\0\12\40"+
    "\5\0\5\40\2\0\4\40\1\237\6\40\5\0\3\40"+
    "\41\0\1\240\134\0\1\241\17\0\1\242\45\0\10\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\6\40"+
    "\7\0\1\153\3\0\1\154\4\0\1\243\5\40\1\244"+
    "\3\40\5\0\5\40\2\0\13\40\5\0\3\40\10\0"+
    "\10\40\1\152\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\4\40\1\245\1\40\7\0\1\153\3\0\1\154\4\0"+
    "\3\40\1\246\6\40\5\0\5\40\2\0\7\40\1\247"+
    "\3\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\4\40\1\250\1\40\7\0"+
    "\1\153\3\0\1\154\4\0\12\40\5\0\5\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\4\40\1\251\1\40\7\0"+
    "\1\153\3\0\1\154\4\0\12\40\5\0\5\40\2\0"+
    "\3\40\1\252\7\40\5\0\3\40\10\0\10\40\1\152"+
    "\1\40\1\0\1\40\1\0\1\40\1\0\6\40\7\0"+
    "\1\153\3\0\1\154\4\0\12\40\5\0\2\40\1\253"+
    "\2\40\2\0\4\40\1\254\6\40\5\0\3\40\10\0"+
    "\10\40\1\152\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\6\40\7\0\1\153\3\0\1\154\4\0\12\40\5\0"+
    "\1\40\1\255\3\40\2\0\13\40\5\0\3\40\10\0"+
    "\10\40\1\152\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\6\40\7\0\1\153\3\0\1\154\4\0\12\40\5\0"+
    "\2\40\1\256\2\40\2\0\13\40\5\0\3\40\10\0"+
    "\10\40\1\152\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\6\40\7\0\1\153\3\0\1\154\4\0\12\40\5\0"+
    "\5\40\2\0\7\40\1\257\3\40\5\0\3\40\10\0"+
    "\10\40\1\152\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\6\40\7\0\1\153\3\0\1\154\4\0\3\40\1\260"+
    "\6\40\5\0\5\40\2\0\13\40\5\0\3\40\121\0"+
    "\1\261\6\0\1\262\1\263\4\262\10\0\1\262\1\0"+
    "\1\262\1\0\1\262\1\0\1\262\3\0\1\264\2\0"+
    "\13\262\1\265\4\262\11\0\1\266\4\262\3\0\1\267"+
    "\2\0\2\262\13\0\5\262\1\270\1\271\1\272\2\262"+
    "\46\0\1\273\55\0\1\274\47\0\1\275\105\0\1\276"+
    "\17\0\1\220\2\0\1\221\13\0\1\222\47\0\1\277"+
    "\3\0\3\277\1\0\1\277\1\0\1\277\1\0\1\277"+
    "\1\0\6\277\1\300\3\0\1\301\13\0\12\277\5\0"+
    "\5\277\2\0\13\277\5\0\3\277\6\0\1\302\1\0"+
    "\1\303\1\304\3\303\3\304\1\302\1\304\1\305\1\304"+
    "\1\302\1\304\1\306\6\304\1\307\3\0\14\302\12\304"+
    "\4\306\1\0\5\304\2\0\13\304\5\0\3\304\2\0"+
    "\2\6\1\116\26\6\1\310\74\6\2\0\1\120\130\0"+
    "\1\311\157\0\1\312\1\313\36\0\1\314\30\0\1\124"+
    "\125\0\1\126\125\0\1\132\130\0\1\311\2\0\3\315"+
    "\4\0\1\316\1\0\1\317\4\0\2\320\1\321\1\320"+
    "\21\0\1\320\7\0\1\320\6\0\1\322\4\320\31\0"+
    "\1\136\125\0\1\140\125\0\1\145\131\0\1\323\1\0"+
    "\3\323\121\0\1\166\1\0\3\166\121\0\1\324\1\0"+
    "\3\324\5\0\1\325\3\0\1\325\107\0\10\40\1\152"+
    "\1\40\1\0\1\40\1\0\1\326\1\0\6\40\7\0"+
    "\1\153\3\0\1\154\4\0\2\40\1\327\7\40\5\0"+
    "\5\40\2\0\12\40\1\330\5\0\3\40\50\0\1\331"+
    "\125\0\1\331\2\0\1\331\13\0\1\331\51\0\2\332"+
    "\121\0\1\333\1\0\5\333\2\0\1\333\3\0\1\333"+
    "\2\0\2\333\1\0\1\333\21\0\3\333\14\0\1\333"+
    "\7\0\1\333\31\0\10\30\1\152\1\30\1\0\1\30"+
    "\1\0\1\30\1\0\6\30\7\0\1\160\3\0\1\161"+
    "\4\0\12\30\5\0\5\30\2\0\5\30\1\334\5\30"+
    "\5\0\3\30\50\0\1\335\125\0\1\335\2\0\1\335"+
    "\13\0\1\335\44\0\1\162\3\0\3\336\4\0\1\337"+
    "\1\0\1\340\4\0\2\162\1\341\1\162\21\0\1\162"+
    "\7\0\1\162\6\0\1\342\4\162\35\0\1\166\1\343"+
    "\3\166\10\0\1\150\5\0\1\150\116\0\1\344\111\0"+
    "\10\30\1\152\1\30\1\0\1\30\1\0\1\30\1\0"+
    "\6\30\7\0\1\160\3\0\1\161\4\0\12\30\5\0"+
    "\5\30\2\0\1\30\1\345\11\30\5\0\3\30\10\0"+
    "\10\40\1\152\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\6\40\7\0\1\153\3\0\1\154\4\0\12\40\5\0"+
    "\5\40\2\0\2\40\1\346\10\40\5\0\3\40\10\0"+
    "\10\40\1\152\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\4\40\1\347\1\40\7\0\1\153\3\0\1\154\4\0"+
    "\12\40\5\0\5\40\2\0\13\40\5\0\3\40\10\0"+
    "\10\40\1\152\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\6\40\7\0\1\153\3\0\1\154\4\0\6\40\1\350"+
    "\3\40\5\0\5\40\2\0\13\40\5\0\3\40\10\0"+
    "\10\40\1\152\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\6\40\7\0\1\153\3\0\1\154\4\0\12\40\5\0"+
    "\2\40\1\351\2\40\2\0\13\40\5\0\3\40\10\0"+
    "\10\40\1\152\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\6\40\7\0\1\153\3\0\1\154\4\0\12\40\5\0"+
    "\3\40\1\352\1\40\2\0\13\40\5\0\3\40\10\0"+
    "\10\40\1\152\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\6\40\7\0\1\153\3\0\1\154\4\0\1\40\1\353"+
    "\10\40\5\0\3\40\1\354\1\40\2\0\13\40\5\0"+
    "\3\40\37\0\1\355\76\0\10\202\1\0\1\202\1\0"+
    "\1\202\1\0\1\202\1\0\6\202\20\0\12\202\5\0"+
    "\5\202\2\0\13\202\5\0\3\202\36\0\1\356\100\0"+
    "\1\357\3\0\3\357\1\0\1\357\1\0\1\357\1\0"+
    "\1\357\1\0\6\357\1\360\17\0\12\357\5\0\5\357"+
    "\2\0\13\357\5\0\3\357\10\0\1\206\1\0\3\206"+
    "\121\0\10\207\1\0\1\207\1\0\1\207\1\0\1\207"+
    "\1\0\6\207\20\0\12\207\5\0\5\207\2\0\13\207"+
    "\5\0\3\207\14\0\1\205\40\0\12\205\75\0\1\361"+
    "\137\0\1\362\125\0\1\363\130\0\1\364\63\0\1\365"+
    "\3\0\3\365\1\0\1\365\1\366\1\365\1\0\1\365"+
    "\1\0\6\365\1\367\12\0\1\370\3\0\1\371\12\365"+
    "\3\0\1\372\1\0\5\365\2\0\13\365\5\0\3\365"+
    "\50\0\1\373\65\0\10\40\1\152\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\6\40\7\0\1\153\3\0\1\154"+
    "\4\0\3\40\1\374\6\40\5\0\5\40\2\0\13\40"+
    "\5\0\3\40\10\0\10\40\1\152\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\6\40\7\0\1\153\3\0\1\154"+
    "\4\0\1\40\1\375\10\40\5\0\5\40\2\0\13\40"+
    "\5\0\3\40\10\0\10\40\1\152\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\376\3\40\7\0\1\153"+
    "\3\0\1\154\4\0\12\40\5\0\5\40\2\0\13\40"+
    "\5\0\3\40\10\0\10\40\1\152\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\4\40\1\377\1\40\7\0\1\153"+
    "\3\0\1\154\4\0\3\40\1\u0100\6\40\5\0\5\40"+
    "\2\0\13\40\5\0\3\40\50\0\1\u0101\65\0\10\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\6\40"+
    "\7\0\1\153\3\0\1\154\4\0\12\40\5\0\3\40"+
    "\1\u0102\1\40\2\0\13\40\5\0\3\40\10\0\10\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\6\40"+
    "\7\0\1\153\3\0\1\154\4\0\1\u0103\11\40\5\0"+
    "\5\40\2\0\13\40\5\0\3\40\10\0\10\40\1\152"+
    "\1\40\1\0\1\40\1\0\1\40\1\0\3\40\1\u0104"+
    "\2\40\7\0\1\153\3\0\1\154\4\0\12\40\5\0"+
    "\5\40\2\0\13\40\5\0\3\40\10\0\10\40\1\152"+
    "\1\40\1\0\1\40\1\0\1\40\1\0\6\40\7\0"+
    "\1\153\3\0\1\154\4\0\6\40\1\u0105\3\40\5\0"+
    "\5\40\2\0\13\40\5\0\3\40\10\0\10\40\1\152"+
    "\1\40\1\0\1\40\1\0\1\40\1\0\6\40\7\0"+
    "\1\153\3\0\1\154\4\0\12\40\5\0\4\40\1\u0106"+
    "\2\0\13\40\5\0\3\40\10\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\6\40\7\0\1\153"+
    "\3\0\1\154\4\0\1\40\1\u0107\10\40\5\0\3\40"+
    "\1\u0108\1\u0109\2\0\13\40\5\0\3\40\10\0\10\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\6\40"+
    "\7\0\1\153\3\0\1\154\4\0\6\40\1\u010a\3\40"+
    "\5\0\5\40\2\0\13\40\5\0\3\40\10\0\10\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\6\40"+
    "\7\0\1\153\3\0\1\154\4\0\7\40\1\u010b\2\40"+
    "\5\0\5\40\2\0\13\40\5\0\3\40\10\0\10\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\6\40"+
    "\7\0\1\153\3\0\1\154\4\0\12\40\5\0\5\40"+
    "\2\0\3\40\1\u010c\7\40\5\0\3\40\10\0\10\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\4\40"+
    "\1\u010d\1\40\7\0\1\153\3\0\1\154\4\0\12\40"+
    "\5\0\5\40\2\0\13\40\5\0\3\40\10\0\10\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\6\40"+
    "\7\0\1\153\3\0\1\154\4\0\1\40\1\u010e\4\40"+
    "\1\u010f\3\40\5\0\4\40\1\u0110\2\0\13\40\5\0"+
    "\3\40\10\0\10\40\1\152\1\40\1\0\1\40\1\0"+
    "\1\40\1\0\6\40\7\0\1\153\3\0\1\154\4\0"+
    "\1\40\1\u0111\10\40\5\0\5\40\2\0\13\40\5\0"+
    "\3\40\10\0\10\40\1\152\1\40\1\0\1\40\1\0"+
    "\1\40\1\0\4\40\1\u0112\1\40\7\0\1\153\3\0"+
    "\1\154\4\0\12\40\5\0\5\40\2\0\13\40\5\0"+
    "\3\40\50\0\1\u0113\61\0\1\262\123\0\1\u0114\1\u0115"+
    "\4\u0114\10\0\1\u0114\1\0\1\u0114\1\0\1\u0114\1\0"+
    "\1\u0114\6\0\20\u0114\12\0\4\u0114\6\0\2\u0114\13\0"+
    "\5\u0114\3\0\2\u0114\1\u0116\1\u0117\4\u0116\10\0\1\u0116"+
    "\1\0\1\u0116\1\0\1\u0116\1\0\1\u0116\6\0\20\u0116"+
    "\12\0\4\u0116\6\0\2\u0116\13\0\5\u0116\3\0\2\u0116"+
    "\1\u0118\1\u0119\4\u0118\10\0\1\u0118\1\0\1\u0118\1\0"+
    "\1\u0118\1\0\1\u0118\6\0\20\u0118\12\0\4\u0118\6\0"+
    "\2\u0118\13\0\5\u0118\3\0\2\u0118\1\u011a\1\u011b\4\u011a"+
    "\10\0\1\u011a\1\0\1\u011a\1\0\1\u011a\1\0\1\u011a"+
    "\6\0\20\u011a\12\0\4\u011a\6\0\2\u011a\13\0\5\u011a"+
    "\3\0\2\u011a\1\u011c\1\u011d\4\u011c\10\0\1\u011c\1\0"+
    "\1\u011c\1\0\1\u011c\1\0\1\u011c\6\0\20\u011c\12\0"+
    "\4\u011c\6\0\2\u011c\13\0\5\u011c\3\0\2\u011c\1\u011e"+
    "\1\u011f\4\u011e\10\0\1\u011e\1\0\1\u011e\1\0\1\u011e"+
    "\1\0\1\u011e\6\0\20\u011e\12\0\4\u011e\6\0\2\u011e"+
    "\13\0\5\u011e\3\0\2\u011e\46\0\1\u0120\110\0\1\u0121"+
    "\102\0\10\277\1\0\1\277\1\0\1\277\1\0\1\277"+
    "\1\0\6\277\20\0\12\277\5\0\5\277\2\0\13\277"+
    "\5\0\3\277\36\0\1\u0122\100\0\1\u0123\3\0\3\u0123"+
    "\1\0\1\u0123\1\0\1\u0123\1\0\1\u0123\1\0\6\u0123"+
    "\1\u0124\17\0\12\u0123\5\0\5\u0123\2\0\13\u0123\5\0"+
    "\3\u0123\10\0\1\303\1\0\3\303\121\0\10\304\1\0"+
    "\1\304\1\0\1\304\1\0\1\304\1\0\6\304\20\0"+
    "\12\304\5\0\5\304\2\0\13\304\5\0\3\304\14\0"+
    "\1\302\40\0\12\302\75\0\1\u0125\71\0\2\6\1\116"+
    "\70\6\1\u0126\32\6\7\0\1\u0127\3\0\3\u0127\1\0"+
    "\1\u0127\1\0\1\u0127\1\0\1\u0127\1\0\6\u0127\1\u0128"+
    "\3\0\1\u0129\13\0\12\u0127\5\0\5\u0127\2\0\13\u0127"+
    "\5\0\3\u0127\6\0\1\u012a\1\0\1\u012b\1\u0127\3\u012b"+
    "\3\u0127\1\u012a\1\u0127\1\u012c\1\u0127\1\u012a\1\u0127\1\u012a"+
    "\6\u0127\1\u0128\3\0\14\u012a\12\u0127\4\u012a\1\0\5\u0127"+
    "\2\0\13\u0127\5\0\3\u0127\12\0\3\u012d\133\0\1\322"+
    "\125\0\1\u012e\113\0\1\u012f\1\0\5\u012f\2\0\1\u012f"+
    "\3\0\1\u012f\2\0\2\u012f\1\0\1\u012f\21\0\3\u012f"+
    "\14\0\1\u012f\7\0\1\u012f\23\0\1\320\3\0\65\320"+
    "\1\0\34\320\6\0\1\24\1\0\3\24\7\0\1\147"+
    "\1\150\5\0\1\150\102\0\1\324\1\u0130\3\324\121\0"+
    "\1\324\1\0\3\324\121\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\6\40\7\0\1\153\3\0"+
    "\1\154\4\0\12\40\5\0\5\40\2\0\1\u0131\12\40"+
    "\5\0\3\40\10\0\10\40\1\152\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\6\40\7\0\1\153\3\0\1\154"+
    "\4\0\4\40\1\u0132\5\40\5\0\5\40\2\0\13\40"+
    "\5\0\3\40\10\0\10\40\1\152\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\6\40\7\0\1\153\3\0\1\154"+
    "\4\0\4\40\1\u0133\5\40\5\0\5\40\2\0\13\40"+
    "\5\0\3\40\11\0\1\u0134\1\0\2\332\121\0\1\333"+
    "\1\u0135\5\333\2\0\1\333\3\0\1\333\2\0\2\333"+
    "\1\0\1\333\21\0\3\333\14\0\1\333\7\0\1\333"+
    "\31\0\10\30\1\152\1\30\1\0\1\30\1\0\1\30"+
    "\1\0\6\30\7\0\1\160\3\0\1\161\4\0\4\30"+
    "\1\u0136\5\30\5\0\5\30\2\0\13\30\5\0\3\30"+
    "\12\0\3\u0137\133\0\1\u0138\125\0\1\u0139\113\0\1\u013a"+
    "\1\0\5\u013a\2\0\1\u013a\3\0\1\u013a\2\0\2\u013a"+
    "\1\0\1\u013a\21\0\3\u013a\14\0\1\u013a\7\0\1\u013a"+
    "\23\0\1\162\3\0\65\162\1\0\34\162\6\0\1\u013b"+
    "\1\0\3\u013b\121\0\10\40\1\152\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\6\40\7\0\1\153\3\0\1\154"+
    "\4\0\3\40\1\u013c\6\40\5\0\5\40\2\0\13\40"+
    "\5\0\3\40\10\0\10\40\1\152\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\6\40\7\0\1\153\3\0\1\154"+
    "\4\0\1\u013d\11\40\5\0\5\40\2\0\13\40\5\0"+
    "\3\40\10\0\10\40\1\152\1\40\1\0\1\40\1\0"+
    "\1\40\1\0\6\40\7\0\1\153\3\0\1\154\4\0"+
    "\12\40\5\0\3\40\1\u013e\1\40\2\0\13\40\5\0"+
    "\3\40\10\0\10\40\1\152\1\40\1\0\1\40\1\0"+
    "\1\40\1\0\4\40\1\u013f\1\40\7\0\1\153\3\0"+
    "\1\154\4\0\3\40\1\u0140\6\40\5\0\5\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\6\40\7\0\1\153\3\0"+
    "\1\154\4\0\12\40\5\0\5\40\2\0\3\40\1\u0141"+
    "\7\40\5\0\3\40\40\0\1\u0142\124\0\1\u0143\76\0"+
    "\10\357\1\0\1\357\1\0\1\357\1\0\1\357\1\0"+
    "\6\357\20\0\12\357\5\0\5\357\2\0\13\357\5\0"+
    "\3\357\36\0\1\u0144\126\0\1\u0145\76\0\10\365\1\0"+
    "\1\365\1\0\1\365\1\0\1\365\1\0\6\365\20\0"+
    "\12\365\5\0\5\365\2\0\13\365\5\0\3\365\11\0"+
    "\1\365\3\0\3\365\1\0\1\365\1\0\1\365\1\0"+
    "\1\365\1\0\6\365\1\367\16\0\1\371\12\365\3\0"+
    "\1\372\1\0\5\365\2\0\13\365\5\0\3\365\36\0"+
    "\1\u0146\71\0\4\u0147\1\0\45\u0147\1\0\53\u0147\4\u0148"+
    "\1\0\63\u0148\1\0\35\u0148\6\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\6\40\7\0\1\153"+
    "\3\0\1\154\4\0\1\u0149\11\40\5\0\5\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\6\40\7\0\1\153\3\0"+
    "\1\154\4\0\3\40\1\u014a\6\40\5\0\5\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\6\40\7\0\1\153\3\0"+
    "\1\154\4\0\12\40\5\0\1\40\1\u014b\3\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\6\40\7\0\1\153\3\0"+
    "\1\154\4\0\6\40\1\u014c\3\40\5\0\5\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\4\40\1\u014d\1\40\7\0"+
    "\1\153\3\0\1\154\4\0\12\40\5\0\5\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\6\40\7\0\1\153\3\0"+
    "\1\154\4\0\12\40\5\0\3\40\1\u014e\1\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\6\40\7\0\1\153\3\0"+
    "\1\154\4\0\12\40\5\0\4\40\1\u014f\2\0\13\40"+
    "\5\0\3\40\10\0\10\40\1\152\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\6\40\7\0\1\153\3\0\1\154"+
    "\4\0\12\40\5\0\5\40\2\0\7\40\1\u0150\3\40"+
    "\5\0\3\40\10\0\10\40\1\152\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\6\40\7\0\1\153\3\0\1\154"+
    "\4\0\12\40\5\0\1\u0151\4\40\2\0\13\40\5\0"+
    "\3\40\10\0\10\40\1\152\1\40\1\0\1\40\1\0"+
    "\1\40\1\0\6\40\7\0\1\153\3\0\1\154\4\0"+
    "\12\40\5\0\2\40\1\u0152\2\40\2\0\3\40\1\u0153"+
    "\7\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\u0154\3\40\7\0"+
    "\1\153\3\0\1\154\4\0\12\40\5\0\5\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\4\40\1\u0155\1\40\7\0"+
    "\1\153\3\0\1\154\4\0\12\40\5\0\5\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\4\40\1\u0156\1\40\7\0"+
    "\1\153\3\0\1\154\4\0\12\40\5\0\5\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\6\40\7\0\1\153\3\0"+
    "\1\154\4\0\12\40\5\0\1\40\1\u0157\3\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\4\40\1\u0158\1\40\7\0"+
    "\1\153\3\0\1\154\4\0\12\40\5\0\5\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\4\40\1\u0159\1\40\7\0"+
    "\1\153\3\0\1\154\4\0\12\40\5\0\5\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\6\40\7\0\1\153\3\0"+
    "\1\154\4\0\3\40\1\u015a\6\40\5\0\5\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\6\40\7\0\1\153\3\0"+
    "\1\154\4\0\12\40\5\0\5\40\2\0\3\40\1\u015b"+
    "\7\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\6\40\7\0\1\153\3\0"+
    "\1\154\4\0\6\40\1\u015c\3\40\5\0\5\40\2\0"+
    "\13\40\5\0\3\40\4\0\1\u0114\125\0\1\u0116\125\0"+
    "\1\u0118\125\0\1\u011a\125\0\1\u011c\125\0\1\u011e\226\0"+
    "\1\u015d\57\0\1\u015e\76\0\10\u0123\1\0\1\u0123\1\0"+
    "\1\u0123\1\0\1\u0123\1\0\6\u0123\20\0\12\u0123\5\0"+
    "\5\u0123\2\0\13\u0123\5\0\3\u0123\36\0\1\u015f\126\0"+
    "\1\u0160\70\0\2\6\1\116\51\6\1\u0161\51\6\6\0"+
    "\10\u0127\1\0\1\u0127\1\0\1\u0127\1\0\1\u0127\1\0"+
    "\6\u0127\20\0\12\u0127\5\0\5\u0127\2\0\13\u0127\5\0"+
    "\3\u0127\36\0\1\u0162\100\0\1\u0127\3\0\3\u0127\1\0"+
    "\1\u0127\1\0\1\u0127\1\0\1\u0127\1\0\6\u0127\1\u0128"+
    "\17\0\12\u0127\5\0\5\u0127\2\0\13\u0127\5\0\3\u0127"+
    "\10\0\1\u012b\1\0\3\u012b\125\0\1\u012a\40\0\12\u012a"+
    "\51\0\3\320\113\0\1\320\3\0\13\320\1\u0163\51\320"+
    "\1\0\34\320\6\0\1\320\1\0\5\320\2\0\1\320"+
    "\3\0\1\320\2\0\2\320\1\0\1\320\21\0\3\320"+
    "\14\0\1\320\7\0\1\320\31\0\1\u0164\1\0\3\u0164"+
    "\121\0\10\40\1\152\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\6\40\7\0\1\153\3\0\1\154\4\0\12\40"+
    "\5\0\5\40\2\0\1\40\1\u0165\11\40\5\0\3\40"+
    "\10\0\10\40\1\152\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\6\40\7\0\1\153\3\0\1\154\4\0\12\40"+
    "\5\0\5\40\2\0\12\40\1\u0166\5\0\3\40\10\0"+
    "\10\40\1\152\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\6\40\7\0\1\153\3\0\1\154\4\0\12\40\5\0"+
    "\5\40\2\0\1\u0167\12\40\5\0\3\40\13\0\2\155"+
    "\121\0\1\156\1\0\5\156\2\0\1\156\3\0\1\156"+
    "\2\0\2\156\1\0\1\156\21\0\3\156\14\0\1\156"+
    "\7\0\1\156\31\0\10\30\1\152\1\30\1\0\1\30"+
    "\1\0\1\30\1\0\6\30\7\0\1\160\3\0\1\161"+
    "\4\0\12\30\5\0\5\30\2\0\1\u0168\12\30\5\0"+
    "\3\30\12\0\3\162\113\0\1\162\3\0\1\u0169\64\162"+
    "\1\0\35\162\3\0\1\u016a\12\162\1\u016b\51\162\1\0"+
    "\34\162\6\0\1\162\1\0\5\162\2\0\1\162\3\0"+
    "\1\162\2\0\2\162\1\0\1\162\21\0\3\162\14\0"+
    "\1\162\7\0\1\162\31\0\1\166\1\0\3\166\10\0"+
    "\1\150\5\0\1\150\102\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\6\40\7\0\1\153\3\0"+
    "\1\154\4\0\12\40\5\0\1\40\1\u016c\3\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\6\40\7\0\1\153\3\0"+
    "\1\154\4\0\12\40\5\0\5\40\2\0\6\40\1\u016d"+
    "\4\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\4\40\1\u016e\1\40\7\0"+
    "\1\153\3\0\1\154\4\0\12\40\5\0\5\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\2\40\1\u016f\3\40\7\0"+
    "\1\153\3\0\1\154\4\0\12\40\5\0\5\40\2\0"+
    "\13\40\5\0\3\40\10\0\10\40\1\152\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\6\40\7\0\1\153\3\0"+
    "\1\154\4\0\12\40\5\0\2\40\1\u0170\2\40\2\0"+
    "\13\40\5\0\3\40\20\0\1\152\23\0\1\160\3\0"+
    "\1\161\115\0\1\u0171\124\0\1\u0172\126\0\1\205\124\0"+
    "\1\u0173\70\0\4\u0147\1\0\45\u0147\1\u0174\53\u0147\4\u0148"+
    "\1\0\63\u0148\1\u0174\35\u0148\6\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\6\40\7\0\1\153"+
    "\3\0\1\154\4\0\12\40\5\0\3\40\1\u0175\1\40"+
    "\2\0\13\40\5\0\3\40\10\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\6\40\7\0\1\153"+
    "\3\0\1\154\4\0\12\40\5\0\1\40\1\u0176\3\40"+
    "\2\0\13\40\5\0\3\40\10\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\4\40\1\u0177\1\40"+
    "\7\0\1\153\3\0\1\154\4\0\12\40\5\0\5\40"+
    "\2\0\13\40\5\0\3\40\10\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\6\40\7\0\1\153"+
    "\3\0\1\154\4\0\12\40\5\0\3\40\1\u0178\1\40"+
    "\2\0\13\40\5\0\3\40\10\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\6\40\7\0\1\153"+
    "\3\0\1\154\4\0\12\40\5\0\5\40\2\0\3\40"+
    "\1\u0179\7\40\5\0\3\40\10\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\6\40\7\0\1\153"+
    "\3\0\1\154\4\0\12\40\5\0\5\40\2\0\11\40"+
    "\1\u017a\1\40\5\0\3\40\10\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\6\40\7\0\1\153"+
    "\3\0\1\154\4\0\12\40\5\0\2\40\1\u017b\2\40"+
    "\2\0\13\40\5\0\3\40\10\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\6\40\7\0\1\153"+
    "\3\0\1\154\4\0\12\40\5\0\2\40\1\u017c\2\40"+
    "\2\0\13\40\5\0\3\40\10\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\u017d\3\40"+
    "\7\0\1\153\3\0\1\154\4\0\12\40\5\0\5\40"+
    "\2\0\13\40\5\0\3\40\10\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\6\40\7\0\1\153"+
    "\3\0\1\154\4\0\12\40\5\0\3\40\1\u017e\1\40"+
    "\2\0\13\40\5\0\3\40\10\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\6\40\7\0\1\153"+
    "\3\0\1\154\4\0\6\40\1\u017f\3\40\5\0\5\40"+
    "\2\0\13\40\5\0\3\40\10\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\6\40\7\0\1\153"+
    "\3\0\1\154\4\0\6\40\1\u0180\3\40\5\0\5\40"+
    "\2\0\13\40\5\0\3\40\10\0\10\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\6\40\7\0\1\153"+
    "\3\0\1\154\4\0\1\40\1\u0181\10\40\5\0\5\40"+
    "\2\0\13\40\5\0\3\40\60\0\1\u0182\105\0\1\u0183"+
    "\124\0\1\u0184\126\0\1\302\67\0\2\u0185\1\u0186\123\u0185"+
    "\35\0\1\u0187\76\0\1\40\1\u0188\6\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\6\40\7\0\1\153"+
    "\3\0\1\154\4\0\12\40\5\0\5\40\2\0\13\40"+
    "\5\0\3\40\10\0\10\40\1\152\1\40\1\0\1\40"+
    "\1\0\1\u0189\1\0\6\40\7\0\1\153\3\0\1\154"+
    "\4\0\12\40\5\0\5\40\2\0\13\40\5\0\3\40"+
    "\10\0\10\40\1\152\1\40\1\0\1\40\1\0\1\u018a"+
    "\1\0\6\40\7\0\1\153\3\0\1\154\4\0\12\40"+
    "\5\0\5\40\2\0\13\40\5\0\3\40\12\0\3\336"+
    "\4\0\1\u018b\1\0\1\u018c\4\0\2\162\1\341\1\162"+
    "\21\0\1\162\7\0\1\162\6\0\1\342\4\162\37\0"+
    "\3\336\4\0\1\337\1\0\1\u018c\4\0\2\162\1\341"+
    "\1\162\21\0\1\162\7\0\1\162\6\0\1\342\4\162"+
    "\47\0\1\342\113\0\10\40\1\152\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\4\40\1\u018d\1\40\7\0\1\153"+
    "\3\0\1\154\4\0\12\40\5\0\5\40\2\0\13\40"+
    "\5\0\3\40\40\0\1\u018e\125\0\1\u0174\75\0\10\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\4\40"+
    "\1\u018f\1\40\7\0\1\153\3\0\1\154\4\0\12\40"+
    "\5\0\5\40\2\0\13\40\5\0\3\40\10\0\10\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\4\40"+
    "\1\u0190\1\40\7\0\1\153\3\0\1\154\4\0\12\40"+
    "\5\0\5\40\2\0\13\40\5\0\3\40\10\0\10\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\6\40"+
    "\7\0\1\153\3\0\1\154\4\0\12\40\5\0\1\40"+
    "\1\u0191\3\40\2\0\13\40\5\0\3\40\10\0\10\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\6\40"+
    "\7\0\1\153\3\0\1\154\4\0\12\40\5\0\3\40"+
    "\1\u0192\1\40\2\0\13\40\5\0\3\40\10\0\10\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\4\40"+
    "\1\u0193\1\40\7\0\1\153\3\0\1\154\4\0\12\40"+
    "\5\0\5\40\2\0\13\40\5\0\3\40\75\0\1\u0194"+
    "\70\0\1\u0195\125\0\1\u012a\75\0\1\40\1\u0196\6\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\6\40"+
    "\7\0\1\153\3\0\1\154\4\0\12\40\5\0\5\40"+
    "\2\0\13\40\5\0\3\40\10\0\1\40\1\u0197\6\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\6\40"+
    "\7\0\1\153\3\0\1\154\4\0\12\40\5\0\5\40"+
    "\2\0\13\40\5\0\3\40\10\0\1\40\1\u0198\6\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\6\40"+
    "\7\0\1\153\3\0\1\154\4\0\12\40\5\0\5\40"+
    "\2\0\13\40\5\0\3\40\22\0\1\u0199\113\0\10\40"+
    "\1\152\1\40\1\0\1\40\1\0\1\40\1\0\6\40"+
    "\7\0\1\153\3\0\1\154\4\0\1\40\1\u019a\10\40"+
    "\5\0\5\40\2\0\13\40\5\0\3\40\2\0\6\u019b"+
    "\10\u0196\1\u019b\1\u0196\1\u019b\1\u0196\1\u019b\1\u0196\1\u019b"+
    "\6\u0196\20\u019b\12\u0196\5\u019b\5\u0196\2\u019b\13\u0196\5\u019b"+
    "\3\u0196\2\u019b\6\0\1\40\1\u019c\6\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\6\40\7\0\1\153"+
    "\3\0\1\154\4\0\12\40\5\0\5\40\2\0\13\40"+
    "\5\0\3\40\10\0\1\40\1\u019d\6\40\1\152\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\6\40\7\0\1\153"+
    "\3\0\1\154\4\0\12\40\5\0\5\40\2\0\13\40"+
    "\5\0\3\40\2\0\1\162\3\0\13\162\1\u016b\51\162"+
    "\1\0\34\162\6\0\10\40\1\u019e\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\6\40\7\0\1\153\3\0\1\154"+
    "\4\0\12\40\5\0\5\40\2\0\13\40\5\0\3\40"+
    "\2\0\126\u019b";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25112];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\1\6\0\1\11\1\1\1\11\4\1\1\3"+
    "\1\1\2\3\3\1\1\3\1\1\4\3\6\1\2\11"+
    "\1\1\1\3\2\1\1\11\4\3\2\1\2\11\5\3"+
    "\2\11\4\3\1\11\1\1\2\11\4\1\2\11\2\0"+
    "\1\11\1\1\1\11\2\1\1\3\1\11\1\1\1\11"+
    "\2\1\1\3\1\11\2\1\1\3\1\11\1\1\1\11"+
    "\2\1\1\3\1\1\1\11\3\0\1\3\1\11\4\1"+
    "\1\3\2\1\1\11\1\1\2\11\2\1\1\3\2\11"+
    "\6\3\1\0\1\1\2\0\1\11\3\1\1\11\1\0"+
    "\1\1\4\11\1\1\2\11\1\15\1\11\2\1\1\11"+
    "\1\1\7\3\2\11\1\1\16\3\1\1\1\11\1\1"+
    "\1\0\1\11\5\0\1\11\1\1\1\11\1\0\1\1"+
    "\2\0\1\11\3\1\1\11\1\0\1\1\1\11\2\1"+
    "\1\11\1\1\2\0\1\11\2\0\2\1\1\0\3\3"+
    "\1\15\2\1\1\3\1\15\1\1\5\0\1\11\10\3"+
    "\2\0\1\1\2\0\3\11\1\1\2\0\1\11\2\0"+
    "\1\11\5\3\1\11\21\3\2\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\2\0\1\1\2\0\1\1\1\5\1\0\1\1"+
    "\1\15\2\5\1\1\1\0\1\1\1\0\3\3\2\0"+
    "\1\3\1\1\2\0\2\1\7\3\6\0\24\3\4\0"+
    "\1\7\1\0\2\1\4\3\3\1\5\3\1\11\2\0"+
    "\1\11\15\3\1\0\1\11\1\0\1\5\1\15\1\0"+
    "\3\3\2\0\1\3\1\11\5\3\2\11\3\3\1\0"+
    "\1\3\1\1\2\3\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
    * resets lexer to initialState
    * @param initialState initial state to set up.
    */
    private void reset(int initialState){
        mySM.reset();
        myCM.reset(zzStartRead, zzEndRead);
        myTM.reset();
        myHM.reset();
        mySM.toState(initialState);
    }



// This is manager for Lexical states
        private StatesManager mySM = new StatesManager(this);

// This is manager to perform all reading operations;
        private ContentManager myCM = new ContentManager(this);

// This is manager to change process each Token;
        private TokensManager myTM = new TokensManager(this);

// This is manager for Heredocs
        private HeredocsManager myHM = new HeredocsManager(this);

    @NotNull
    public final CharSequence getBuffer(){
        return zzBuffer;
    }

    @NotNull
    public final ContentManager getContentManager(){
        return myCM;
    }

    @NotNull
    public final HeredocsManager getHeredocsManager(){
        return myHM;
    }

    @NotNull
    public final StatesManager getStatesManager(){
        return mySM;
    }

    @NotNull
    public final TokensManager getTokensManager(){
        return myTM;
    }



  public _RubyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _RubyLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    reset(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    reset(buffer, 0, buffer.length(), initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
          System.out.println("Current state: " + mySM.getStateName());
        System.out.println("Text: " + myCM.safeReadStringAt(0, 10));
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      zzWasPushback = false;

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 94: 
          { return myTM.process(myTM.reswordAllowed() ? kFOR : tIDENTIFIER);
          }
        case 150: break;
        case 53: 
          { return myTM.process(tPLUS_OP_ASGN);
          }
        case 151: break;
        case 17: 
          { return myTM.process(tCOMMA);
          }
        case 152: break;
        case 144: 
          { return myTM.process(myTM.reswordAllowed() ? kMODULE : tIDENTIFIER);
          }
        case 153: break;
        case 69: 
          { return myTM.process(tLSHFT);
          }
        case 154: break;
        case 61: 
          { return myTM.process(tNMATCH);
          }
        case 155: break;
        case 115: 
          { return myTM.process(tOR_OP_ASGN);
          }
        case 156: break;
        case 127: 
          { return myTM.process(myTM.reswordAllowed() ? klBEGIN : tCONSTANT);
          }
        case 157: break;
        case 131: 
          { return myTM.process(myTM.reswordAllowed() ? kELSIF : tIDENTIFIER);
          }
        case 158: break;
        case 26: 
          { mySM.toStringLikeState(IN_NI_STRING_STATE, '\'');
                                            return myTM.process(tSINGLE_QUOTED_STRING_BEG);
          }
        case 159: break;
        case 141: 
          { if (myTM.reswordAllowed()){
                                                return myTM.process(myTM.isExprEnd() ? kRESCUE_MOD : kRESCUE);
                                            }
                                            return myTM.process(tIDENTIFIER);
          }
        case 160: break;
        case 31: 
          { return myTM.process(tRPAREN);
          }
        case 161: break;
        case 10: 
          { return myTM.process(myTM.unaryAllowed(TextUtil.isWhiteSpaceOrEol(myCM.safeReadAt(1))) ? tUMINUS : tMINUS);
          }
        case 162: break;
        case 40: 
          { // IN_REGEXP_STATE
                                            char beginDelimiter = mySM.getBeginDelimiter();
                                            char endDelimiter = mySM.getEndDelimiter();
                                            int l = myCM.eatExprNoEsc(beginDelimiter, endDelimiter);
// end
                                            if (l==ContentManager.END_SEEN){
                                               int modLength = 1;
                                               while (TextUtil.isRegexpModifier(myCM.safeReadAt(modLength))){
                                                   zzMarkedPos++;
                                                   modLength++;
                                               }
                                               mySM.toPreviousState();
                                               return myTM.process(tREGEXP_END);
                                            }
// simple escape
                                            if (l==ContentManager.SIMPLE_ESCAPE_SEEN){
                                                zzMarkedPos+=1;
                                                return myTM.process(tESCAPE_SEQUENCE);
                                            }
// content
                                            assert (l>0);
                                            zzMarkedPos+=l-1;
                                            return myTM.process(tREGEXP_CONTENT);
          }
        case 163: break;
        case 121: 
          { return myTM.process(myTM.reswordAllowed() ? kNEXT : tIDENTIFIER);
          }
        case 164: break;
        case 45: 
          { return myTM.process(tFID);
          }
        case 165: break;
        case 79: 
          { if (myTM.isFnameAllowed()){
                                                return myTM.process(tAREF);
                                            }
                                            yypushback(1);
                                            return myTM.process(myTM.isFTokenAllowed() ? tfLBRACK :  tLBRACK);
          }
        case 166: break;
        case 19: 
          { return myTM.process(tCOLON);
          }
        case 167: break;
        case 47: 
          { if (myTM.isAssignOpAllowed()){
                                                return myTM.process(tAID);
                                            }
                                            yypushback(1);
                                            return myTM.process(tCONSTANT);
          }
        case 168: break;
        case 105: 
          { return myTM.process(tAND_OP_ASGN);
          }
        case 169: break;
        case 16: 
          { return myTM.process(tSEMICOLON);
          }
        case 170: break;
        case 145: 
          { mySM.toState(IN_BLOCK_COMMENT_STATE);
                                            return myTM.process(tBLOCK_COMMENT_BEGIN);
          }
        case 171: break;
        case 6: 
          { return myTM.process(tINTEGER);
          }
        case 172: break;
        case 103: 
          { return myTM.process(myTM.reswordAllowed() ? kAND : tIDENTIFIER);
          }
        case 173: break;
        case 8: 
          { return myTM.process(tCONSTANT);
          }
        case 174: break;
        case 130: 
          { return myTM.process(kFALSE);
          }
        case 175: break;
        case 142: 
          { return myTM.process(myTM.reswordAllowed() ? kRETURN : tIDENTIFIER);
          }
        case 176: break;
        case 112: 
          { if (myTM.stringAllowed()){
                                                mySM.toStringLikeState(IN_STRING_STATE, myCM.safeReadAt(2));
                                                return myTM.process(tDOUBLE_QUOTED_STRING_BEG);
                                            }
                                            yypushback(2);
                                            return myTM.process(tPERC);
          }
        case 177: break;
        case 12: 
          { return myTM.process(myTM.unaryAllowed(TextUtil.isWhiteSpaceOrEol(myCM.safeReadAt(1))) ? tUPLUS : tPLUS);
          }
        case 178: break;
        case 13: 
          { return myTM.process(myTM.unaryAllowed(TextUtil.isWhiteSpaceOrEol(myCM.safeReadAt(1))) ? tSTAR : tMULT);
          }
        case 179: break;
        case 35: 
          { return myTM.process(tXOR);
          }
        case 180: break;
        case 135: 
          { return myTM.process(myTM.reswordAllowed() ? kRETRY : tIDENTIFIER);
          }
        case 181: break;
        case 74: 
          { return myTM.process(myTM.reswordAllowed() ? kIN : tIDENTIFIER);
          }
        case 182: break;
        case 43: 
          { // IN_HEREDOC_STATE
                                            int l = ContentManager.END_SEEN;
                                            if (!myHM.isEndSeen()){
                                                l = myHM.eatHereDocContent();
                                                if (l>0){
// content
                                                    zzMarkedPos+=l-1;
                                                    return myTM.process(tHEREDOC_CONTENT);
                                                }
                                            }
                                            assert l == ContentManager.END_SEEN;
// end
                                            if (myHM.isEndSeen()){
// eol
                                                if (TextUtil.isEol(myCM.safeReadAt(0))){
                                                    return myTM.process(tEOL);
                                                }
// whitespace
                                                int number = 0;
                                                while (TextUtil.isWhiteSpace(myCM.safeReadAt(number))){
                                                    number++;
                                                }
                                                if (number>0){
                                                    zzMarkedPos+=number-1;
                                                    return myTM.process(tWHITE_SPACE);
                                                }
// heredoc_end
                                                zzMarkedPos+=myHM.getIdLength()-1;
                                                boolean indented = myHM.isIndented();
                                                myHM.poll();
                                                mySM.toPreviousState();
                                                mySM.setAfterHeredoc(myHM.size()>0);
                                                return myTM.process(indented ? tHEREDOC_INDENTED_END : tHEREDOC_END);
                                            }
          }
        case 183: break;
        case 2: 
          { return myTM.process(tBAD_CHARACTER);
          }
        case 184: break;
        case 146: 
          { return myTM.process(tEND_MARKER);
          }
        case 185: break;
        case 126: 
          { mySM.toPreviousState();
                                            return myTM.process(tBLOCK_COMMENT_END);
          }
        case 186: break;
        case 108: 
          { if (myTM.isFnameAllowed()){
                                                return myTM.process(tASET);
                                            }
                                            yypushback(2);
                                            return myTM.process(myTM.isFTokenAllowed() ? tfLBRACK :  tLBRACK);
          }
        case 187: break;
        case 138: 
          { if (myTM.reswordAllowed()){
                                                return myTM.process(myTM.isExprEnd() ? kUNTIL_MOD : kUNTIL);
                                            }
                                            return myTM.process(tIDENTIFIER);
          }
        case 188: break;
        case 136: 
          { return myTM.process(kSUPER);
          }
        case 189: break;
        case 66: 
          { return myTM.process(tSYMBEG);
          }
        case 190: break;
        case 62: 
          { if (myTM.isExprEnd()){
                                                return myTM.process(tDIV_OP_ASGN);
                                            }
                                            if (myTM.stringAllowed(false)){
                                                yypushback(1);
                                                mySM.toStringLikeState(IN_REGEXP_STATE, '/');
                                                return myTM.process(tREGEXP_BEG);
                                            }
                                            yypushback(1);
                                            return myTM.process(tDIV);
          }
        case 191: break;
        case 143: 
          { if (myTM.reswordAllowed()){
                                                return myTM.process(myTM.isExprEnd() ? kUNLESS_MOD : kUNLESS);
                                            }
                                            return myTM.process(tIDENTIFIER);
          }
        case 192: break;
        case 100: 
          { if (myTM.isHeredocAllowed()){
                                                myHM.registerHeredoc(yytext().toString());
                                                return myTM.process(tHEREDOC_ID);
                                            }
                                            zzMarkedPos = getTokenStart()+2;
                                            return myTM.process(tLSHFT);
          }
        case 193: break;
        case 30: 
          { return myTM.process(myTM.isFTokenAllowed() ? tfLBRACK :  tLBRACK);
          }
        case 194: break;
        case 36: 
          { mySM.processOpenBrace();
                                            return myTM.process(myTM.isFTokenAllowed() ? tfLBRACE :  tLBRACE);
          }
        case 195: break;
        case 96: 
          { return myTM.process(tCVAR);
          }
        case 196: break;
        case 70: 
          { return myTM.process(tGEQ);
          }
        case 197: break;
        case 21: 
          { return myTM.process(tGT);
          }
        case 198: break;
        case 50: 
          { return myTM.process(tFLOAT);
          }
        case 199: break;
        case 39: 
          { // IN_NI_WORDS_STATE
                                            char beginDelimiter = mySM.getBeginDelimiter();
                                            char endDelimiter = mySM.getEndDelimiter();
                                            int l = myCM.eatNoExprNoEsc(beginDelimiter, endDelimiter);
// end
                                            if (l==ContentManager.END_SEEN){
                                                mySM.toPreviousState();
                                                return myTM.process(tWORDS_END);
                                            }
// simple escape
                                            if (l==ContentManager.SIMPLE_ESCAPE_SEEN){
                                                zzMarkedPos+=1;
                                                return myTM.process(tESCAPE_SEQUENCE);
                                            }
// content
                                            assert (l>0);
                                            zzMarkedPos+=l-1;
                                            return myTM.process(tWORDS_CONTENT);
          }
        case 200: break;
        case 60: 
          { return myTM.process(tNEQ);
          }
        case 201: break;
        case 55: 
          { return myTM.process(tGVAR);
          }
        case 202: break;
        case 23: 
          { return myTM.process(tTILDE);
          }
        case 203: break;
        case 5: 
          { return myTM.process(TLINE_COMMENT);
          }
        case 204: break;
        case 122: 
          { return myTM.process(myTM.reswordAllowed() ? kREDO : tIDENTIFIER);
          }
        case 205: break;
        case 42: 
          { // IN_NI_STRING_STATE
                                            char beginDelimiter = mySM.getBeginDelimiter();
                                            char endDelimiter = mySM.getEndDelimiter();
                                            int l = myCM.eatNoExprNoEsc(beginDelimiter, endDelimiter);
// end
                                            if (l==ContentManager.END_SEEN){
                                                mySM.toPreviousState();
                                                return myTM.process(tSTRING_END);
                                            }
// simple escape
                                            if (l==ContentManager.SIMPLE_ESCAPE_SEEN){
                                                zzMarkedPos+=1;
                                                return myTM.process(tESCAPE_SEQUENCE);
                                            }
// content
                                            assert(l>0);
                                            zzMarkedPos+=l-1;
                                            return myTM.process(T_STRING_CONTENT);
          }
        case 206: break;
        case 29: 
          { if (myTM.isFTokenAllowed()){
                                            return myTM.process(tfLPAREN);
                                           }
                                           if (myTM.isArgTokenAllowed()){
                                            return myTM.process(tLPAREN_ARG);
                                           }
                                           return myTM.process(tLPAREN);
          }
        case 207: break;
        case 149: 
          { return myTM.process(myTM.reswordAllowed() ? kDEFINED : tIDENTIFIER);
          }
        case 208: break;
        case 93: 
          { return myTM.process(myTM.reswordAllowed() ? klEND : tCONSTANT);
          }
        case 209: break;
        case 22: 
          { mySM.toStringLikeState(IN_STRING_STATE, '"');
                                            return myTM.process(tDOUBLE_QUOTED_STRING_BEG);
          }
        case 210: break;
        case 20: 
          { return myTM.process(tLT);
          }
        case 211: break;
        case 63: 
          { return myTM.process(tEQ);
          }
        case 212: break;
        case 119: 
          { return myTM.process(myTM.reswordAllowed() ? kWHEN : tIDENTIFIER);
          }
        case 213: break;
        case 111: 
          { if (myTM.stringAllowed()){
                                                mySM.toStringLikeState(IN_REGEXP_STATE, myCM.safeReadAt(2));
                                                return myTM.process(tREGEXP_BEG);
                                            }
                                            yypushback(2);
                                            return myTM.process(tPERC);
          }
        case 214: break;
        case 48: 
          { if (myTM.isFnameAllowed()){
                                                return myTM.process(tUMINUS_OP);
                                            }

                                            yypushback(1);
                                            return myTM.process(myTM.unaryAllowed(false) ? tUMINUS : tMINUS);
          }
        case 215: break;
        case 49: 
          { return myTM.process(tMINUS_OP_ASGN);
          }
        case 216: break;
        case 106: 
          { return myTM.process(kNIL);
          }
        case 217: break;
        case 15: 
          { if (myTM.stringAllowed(TextUtil.isWhiteSpaceOrEol(myCM.safeReadAt(1)))){
                                                mySM.toStringLikeState(IN_REGEXP_STATE, '/');
                                                return myTM.process(tREGEXP_BEG);
                                            }
                                            return myTM.process(tDIV);
          }
        case 218: break;
        case 92: 
          { return myTM.process(tDOT3);
          }
        case 219: break;
        case 65: 
          { return myTM.process(tMATCH);
          }
        case 220: break;
        case 18: 
          { return myTM.process(tASSGN);
          }
        case 221: break;
        case 88: 
          { mySM.toPreviousState();  return myTM.process(tBACK_REF);
          }
        case 222: break;
        case 98: 
          { return myTM.process(tEQQ);
          }
        case 223: break;
        case 85: 
          { mySM.toPreviousState();  return myTM.process(tIVAR);
          }
        case 224: break;
        case 38: 
          { // IN_WORDS_STATE
                                            char beginDelimiter = mySM.getBeginDelimiter();
                                            char endDelimiter = mySM.getEndDelimiter();
                                            int l = myCM.eatExprNoEsc(beginDelimiter, endDelimiter);
// end
                                            if (l==ContentManager.END_SEEN){
                                                mySM.toPreviousState();
                                                return myTM.process(tWORDS_END);
                                            }
// simple escape
                                            if (l==ContentManager.SIMPLE_ESCAPE_SEEN){
                                                zzMarkedPos+=1;
                                                return myTM.process(tESCAPE_SEQUENCE);
                                            }
// content
                                            assert (l>0);
                                            zzMarkedPos+=l-1;
                                            return myTM.process(tWORDS_CONTENT);
          }
        case 225: break;
        case 137: 
          { return myTM.process(myTM.reswordAllowed() ? kUNDEF : tIDENTIFIER);
          }
        case 226: break;
        case 84: 
          { return myTM.process(tXOR_OP_ASGN);
          }
        case 227: break;
        case 97: 
          { return myTM.process(tPOW_OP_ASGN);
          }
        case 228: break;
        case 56: 
          { return myTM.process(tNTH_REF);
          }
        case 229: break;
        case 57: 
          { return myTM.process(tBACK_REF);
          }
        case 230: break;
        case 77: 
          { return myTM.process(tAND);
          }
        case 231: break;
        case 1: 
          { return myTM.process(tBLOCK_COMMENT_CONTENT);
          }
        case 232: break;
        case 114: 
          { if (myTM.stringAllowed()){
                                                mySM.toStringLikeState(IN_WORDS_STATE, myCM.safeReadAt(2));
                                                return myTM.process(tQWORDS_BEG);
                                            }
                                            yypushback(2);
                                            return myTM.process(tPERC);
          }
        case 233: break;
        case 140: 
          { return myTM.process(myTM.reswordAllowed() ? kENSURE : tIDENTIFIER);
          }
        case 234: break;
        case 83: 
          { if (myTM.isExprEnd()){
                                                return myTM.process(tOR);
                                            }
                                            yypushback(1);
                                            return myTM.process(tPIPE);
          }
        case 235: break;
        case 133: 
          { if (myTM.reswordAllowed()){
                                                return myTM.process(myTM.isExprEnd() ? kWHILE_MOD : kWHILE);
                                            }
                                            return myTM.process(tIDENTIFIER);
          }
        case 236: break;
        case 132: 
          { return myTM.process(myTM.reswordAllowed() ? kALIAS : tIDENTIFIER);
          }
        case 237: break;
        case 44: 
          { return myTM.process(tLINE_CONTINUATION);
          }
        case 238: break;
        case 113: 
          { if (myTM.stringAllowed()){
                                                mySM.toStringLikeState(IN_NI_STRING_STATE, myCM.safeReadAt(2));
                                                return myTM.process(tSINGLE_QUOTED_STRING_BEG);
                                            }
                                            yypushback(2);
                                            return myTM.process(tPERC);
          }
        case 239: break;
        case 91: 
          { return myTM.process(tESCAPE_SEQUENCE);
          }
        case 240: break;
        case 24: 
          { return myTM.process(myTM.unaryAllowed(TextUtil.isWhiteSpaceOrEol(myCM.safeReadAt(1))) ? tAMPER : tBIT_AND);
          }
        case 241: break;
        case 73: 
          { if (myTM.reswordAllowed()){
                                                return myTM.process(myTM.isExprEnd() ? kIF_MOD : kIF);
                                            }
                                            return myTM.process(tIDENTIFIER);
          }
        case 242: break;
        case 32: 
          { return myTM.process(tRBRACK);
          }
        case 243: break;
        case 75: 
          { if (myTM.isFnameAllowed()){
                                                return myTM.process(tUTILDE_OP);
                                            }

                                            yypushback(1);
                                            return myTM.process(tTILDE);
          }
        case 244: break;
        case 46: 
          { if (myTM.isAssignOpAllowed()){
                                                return myTM.process(tAID);
                                            }
                                            yypushback(1);
                                            return myTM.process(tIDENTIFIER);
          }
        case 245: break;
        case 99: 
          { return myTM.process(tCMP);
          }
        case 246: break;
        case 34: 
          { return myTM.process(myTM.isExprEnd() ? tBIT_OR : tPIPE);
          }
        case 247: break;
        case 101: 
          { return myTM.process(tLSHFT_OP_ASGN);
          }
        case 248: break;
        case 28: 
          { return myTM.process(tRBRACE);
          }
        case 249: break;
        case 102: 
          { return myTM.process(tRSHFT_OP_ASGN);
          }
        case 250: break;
        case 25: 
          { if (!myTM.isFnameAllowed()){
                                                mySM.toStringLikeState(IN_STRING_STATE, '`');
                                                return myTM.process(tXSTRING_BEG);
                                            }
                                            return myTM.process(tSHELL);
          }
        case 251: break;
        case 72: 
          { if (myTM.reswordAllowed()){
                                                return myTM.process(mySM.isDoCondExpected() ? kDO_COND : kDO);
                                            }
                                            return myTM.process(tIDENTIFIER);
          }
        case 252: break;
        case 37: 
          { mySM.processCloseBrace();
                                            if (mySM.wasEndBraceSeen()){
                                                mySM.toPreviousState();
                                                return myTM.process(tSTRING_DEND);
                                            } else {
                                                return myTM.process(tRBRACE);
                                            }
          }
        case 253: break;
        case 41: 
          { // IN_STRING_STATE
                                            char beginDelimiter = mySM.getBeginDelimiter();
                                            char endDelimiter = mySM.getEndDelimiter();
                                            int l = myCM.eatExprEsc(beginDelimiter, endDelimiter);
// end
                                            if (l==ContentManager.END_SEEN){
                                                mySM.toPreviousState();
                                                return myTM.process(tSTRING_END);
                                            }
// simple escape
                                            if (l==ContentManager.SIMPLE_ESCAPE_SEEN){
                                                zzMarkedPos+=1;
                                                return myTM.process(tESCAPE_SEQUENCE);
                                            }
// backslash
                                            if (l==ContentManager.BACKSLASH_SEEN){
                                                return myTM.process(tINVALID_ESCAPE_SEQUENCE);
                                            }
// content
                                            assert(l>0);
                                            zzMarkedPos+=l-1;
                                            return myTM.process(T_STRING_CONTENT);
          }
        case 254: break;
        case 110: 
          { if (myTM.stringAllowed()){
                                                mySM.toStringLikeState(IN_NI_WORDS_STATE, myCM.safeReadAt(2));
                                                return myTM.process(tWORDS_BEG);
                                            }
                                            yypushback(2);
                                            return myTM.process(tPERC);
          }
        case 255: break;
        case 33: 
          { return myTM.process(tPERC);
          }
        case 256: break;
        case 95: 
          { return myTM.process(myTM.reswordAllowed() ? kEND : tIDENTIFIER);
          }
        case 257: break;
        case 82: 
          { return myTM.process(tBIT_OR_OP_ASGN);
          }
        case 258: break;
        case 52: 
          { if (myTM.isFnameAllowed()){
                                                return myTM.process(tUPLUS_OP);
                                            }

                                            yypushback(1);
                                            return myTM.process(myTM.unaryAllowed(false) ? tUPLUS : tPLUS);
          }
        case 259: break;
        case 11: 
          { return myTM.process(tDOT);
          }
        case 260: break;
        case 134: 
          { if (myTM.reswordAllowed()){
                                                return myTM.process(kCLASS);
                                            }
                                            return myTM.process(tIDENTIFIER);
          }
        case 261: break;
        case 64: 
          { return myTM.process(tASSOC);
          }
        case 262: break;
        case 3: 
          { return myTM.process(tWHITE_SPACE);
          }
        case 263: break;
        case 27: 
          { return myTM.process(myTM.isFTokenAllowed() ? tfLBRACE :  tLBRACE);
          }
        case 264: break;
        case 9: 
          { return myTM.process(tQUESTION);
          }
        case 265: break;
        case 4: 
          { if (myTM.ignoreEOL()){
                                                return myTM.process(tWHITE_SPACE);
                                            }
                                            if (mySM.isAfterHeredoc()){
                                                mySM.toState(IN_HEREDOC_STATE);
                                                return myTM.process(tEOL);
                                            }
                                            return myTM.process(tEOL);
          }
        case 266: break;
        case 120: 
          { return myTM.process(myTM.reswordAllowed() ? kCASE : tIDENTIFIER);
          }
        case 267: break;
        case 76: 
          { return myTM.process(tBIT_AND_OP_ASGN);
          }
        case 268: break;
        case 129: 
          { return myTM.process(myTM.reswordAllowed() ? kBREAK : tIDENTIFIER);
          }
        case 269: break;
        case 87: 
          { mySM.toPreviousState();  return myTM.process(tNTH_REF);
          }
        case 270: break;
        case 54: 
          { return myTM.process(tIVAR);
          }
        case 271: break;
        case 128: 
          { return myTM.process(myTM.reswordAllowed() ? kBEGIN : tIDENTIFIER);
          }
        case 272: break;
        case 123: 
          { return myTM.process(kSELF);
          }
        case 273: break;
        case 80: 
          { if (myTM.stringAllowed()){
                                                mySM.toStringLikeState(IN_STRING_STATE, myCM.safeReadAt(1));
                                                return myTM.process(tDOUBLE_QUOTED_STRING_BEG);
                                            }
                                            yypushback(1);
                                            return myTM.process(tPERC);
          }
        case 274: break;
        case 148: 
          { return myTM.process(kLINE);
          }
        case 275: break;
        case 67: 
          { return myTM.process(myTM.isColon2Allowed() ? tCOLON2 : tCOLON3);
          }
        case 276: break;
        case 89: 
          { return myTM.process(tSTRING_LIKE_CONTENT);
          }
        case 277: break;
        case 58: 
          { return myTM.process(tPOW);
          }
        case 278: break;
        case 78: 
          { return myTM.process(myTM.reswordAllowed() ? kOR : tIDENTIFIER);
          }
        case 279: break;
        case 125: 
          { return myTM.process(myTM.reswordAllowed() ? kTHEN : tIDENTIFIER);
          }
        case 280: break;
        case 147: 
          { return myTM.process(kFILE);
          }
        case 281: break;
        case 117: 
          { mySM.toVarSubtState(IN_VAR_SUBT_STATE);
                                            return myTM.process(tSTRING_DVAR);
          }
        case 282: break;
        case 68: 
          { return myTM.process(tLEQ);
          }
        case 283: break;
        case 107: 
          { return myTM.process(myTM.reswordAllowed() ? kNOT : tIDENTIFIER);
          }
        case 284: break;
        case 71: 
          { return myTM.process(tRSHFT);
          }
        case 285: break;
        case 118: 
          { return myTM.process(myTM.reswordAllowed() ? kELSE : tIDENTIFIER);
          }
        case 286: break;
        case 124: 
          { return myTM.process(kTRUE);
          }
        case 287: break;
        case 116: 
          { mySM.toPreviousState();  return myTM.process(tCVAR);
          }
        case 288: break;
        case 90: 
          { mySM.toExprSubtState(IN_EXPR_SUBT_STATE);
                                            return myTM.process(tSTRING_DBEG);
          }
        case 289: break;
        case 109: 
          { if (myTM.stringAllowed()){
                                                mySM.toStringLikeState(IN_STRING_STATE, myCM.safeReadAt(2));
                                                return myTM.process(tXSTRING_BEG);
                                            }
                                            yypushback(2);
                                            return myTM.process(tPERC);
          }
        case 290: break;
        case 59: 
          { return myTM.process(tMULT_OP_ASGN);
          }
        case 291: break;
        case 51: 
          { return myTM.process(tDOT2);
          }
        case 292: break;
        case 14: 
          { return myTM.process(tEXCLAMATION);
          }
        case 293: break;
        case 104: 
          { return myTM.process(myTM.reswordAllowed() ? kDEF : tIDENTIFIER);
          }
        case 294: break;
        case 86: 
          { mySM.toPreviousState();  return myTM.process(tGVAR);
          }
        case 295: break;
        case 7: 
          { return myTM.process(tIDENTIFIER);
          }
        case 296: break;
        case 81: 
          { if (myTM.isExprEnd()){
                                                return myTM.process(tPERC_OP_ASGN);
                                            }
                                            if (myTM.stringAllowed(false)){
                                                mySM.toStringLikeState(IN_STRING_STATE, '=');
                                                return myTM.process(tDOUBLE_QUOTED_STRING_BEG);
                                            }
                                            yypushback(1);
                                            return myTM.process(tPERC);
          }
        case 297: break;
        case 139: 
          { return myTM.process(myTM.reswordAllowed() ? kYIELD : tIDENTIFIER);
          }
        case 298: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
