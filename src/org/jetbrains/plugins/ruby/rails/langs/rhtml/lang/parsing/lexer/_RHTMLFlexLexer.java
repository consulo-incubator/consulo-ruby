/* The following code was generated by JFlex 1.4.3 on 24.09.13 18:09 */

package org.jetbrains.plugins.ruby.rails.langs.rhtml.lang.parsing.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.plugins.ruby.rails.langs.rhtml.lang.parsing.RHTMLTokenType;

/* Auto generated File */
@SuppressWarnings({"AccessStaticViaInstance", "FieldCanBeLocal", "UnusedAssignment", "JavaDoc", "UnusedDeclaration", "SimplifiableIfStatement", "ConstantConditions"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24.09.13 18:09 from the specification file
 * <tt>F:/github.com/consulo-incubator/consulo-ruby/src/org/jetbrains/plugins/ruby/rails/langs/rhtml/lang/parsing/lexer/rhtml.flex</tt>
 */
public class _RHTMLFlexLexer implements FlexLexer, RHTMLTokenType {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_RHTML_EXPRESSION_STATE = 10;
  public static final int IN_RHTML_COMMENT_PROCESS_LINE_STATE = 16;
  public static final int RHTML_INJECTION_START_STATE = 2;
  public static final int RHTML_EXPRESSION_END_STATE = 12;
  public static final int YYINITIAL = 0;
  public static final int RHTML_SCRIPTLET_END_STATE = 6;
  public static final int IN_RHTML_COMMENT_STATE = 14;
  public static final int IN_RHTML_SCRIPTLET_STATE = 4;
  public static final int RHTML_COMMENT_END_STATE = 18;
  public static final int IN_OMIT_LINE_MODIFIER_FOR_START_STATE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\2\2\0\1\1\25\0\1\6\1\0\1\4\7\0"+
    "\1\10\16\0\1\3\1\5\1\7\uffc1\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\2\0\1\3\1\0\1\4\2\0"+
    "\1\1\2\5\1\2\1\5\1\6\1\7\1\3\1\5"+
    "\1\10\1\4\2\11\2\12\2\5\1\1\1\13\1\2"+
    "\1\14\1\3\1\15\1\4\1\11\1\0\1\16\1\17"+
    "\2\20\1\21\1\22\1\23\1\24\3\0\1\23\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[49];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\11\0\22\0\33\0\44\0\55\0\66\0\77"+
    "\0\110\0\121\0\132\0\143\0\154\0\165\0\176\0\143"+
    "\0\143\0\207\0\220\0\143\0\231\0\242\0\253\0\264"+
    "\0\143\0\275\0\306\0\317\0\330\0\341\0\143\0\352"+
    "\0\143\0\363\0\143\0\374\0\143\0\143\0\143\0\u0105"+
    "\0\143\0\143\0\u010e\0\u0117\0\u0120\0\u0129\0\u0132\0\143"+
    "\0\143";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[49];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\1\1\13\5\1\3\14\1\15\5\14\4\16\1\3"+
    "\4\16\4\14\1\17\3\14\1\20\10\14\1\21\4\22"+
    "\1\6\4\22\4\14\1\23\3\14\1\24\1\25\1\26"+
    "\1\27\1\25\1\10\4\25\1\14\1\30\1\31\1\14"+
    "\1\32\10\14\1\33\4\14\3\1\1\13\1\34\4\1"+
    "\15\0\1\35\4\0\4\16\1\36\4\16\7\0\1\37"+
    "\1\0\4\22\1\40\4\22\7\0\1\41\1\0\1\25"+
    "\1\26\1\27\1\25\1\42\4\25\2\0\1\43\1\0"+
    "\1\44\10\0\1\44\6\0\1\31\15\0\1\45\10\0"+
    "\1\46\1\0\3\47\1\50\1\1\4\47\5\0\1\51"+
    "\1\52\2\0\4\16\1\3\2\16\1\53\1\16\4\22"+
    "\1\6\2\22\1\54\1\22\1\25\1\26\1\27\1\25"+
    "\1\10\2\25\1\27\1\25\7\0\1\43\5\0\1\55"+
    "\10\0\1\56\10\0\1\57\4\0\4\47\1\0\4\47"+
    "\7\0\1\60\10\0\1\61\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\1\2\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\11\3\1\2\11\2\1\1\11\4\1\1\11"+
    "\5\1\1\11\1\1\1\11\1\1\1\11\1\0\3\11"+
    "\1\1\2\11\2\1\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[49];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int getTagLength(final boolean isOpenTag, final boolean isInComment) {
        final int chPosition = zzMarkedPos - 2;
        final char ch = zzBuffer.charAt(chPosition);

        final char ch1 = zzBuffer.charAt(zzMarkedPos - 1);

        //System.out.println("pos - 1["+ (zzMarkedPos - 1) +"]: [" + ch1 + "]");
        //System.out.println("pos - 2["+ (zzMarkedPos - 2) +"]: [" + ch + "]");

        if (isOpenTag) {
            if (ch == '%') {
                return 3;
            }
            return 0;
        } else {
            if (isInComment) {
                if (ch1 == '\n') {
                    return ch != '\r' ? 1 : 2;
                } else if (ch1 == '\r') {
                    return 1;
                }
            }
            
            final int omitPosition = zzMarkedPos - 3;
            if (ch == '%') {
                if (!isInComment && (omitPosition >= 0 && zzBuffer.charAt(omitPosition) == '-')){
                    return 3;
                } else {
                    if (isInComment && (omitPosition >= 0)) {
                      final char ch3 = zzBuffer.charAt(omitPosition);
                      if (ch3 == '\n' || ch3 == '\r') {
                          return 3;
                      }
                    }
                    return 2;
                }
            }
            return 0;
        }
    }



  public _RHTMLFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _RHTMLFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 32) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { if (zzMarkedPos < zzBuffer.length() && zzBuffer.charAt(zzMarkedPos) == '-'){
                                                 yybegin(IN_OMIT_LINE_MODIFIER_FOR_START_STATE);
                                             } else {
                                                 yybegin(IN_RHTML_SCRIPTLET_STATE);
                                             }
                                             return RHTML_SCRIPTLET_START;
          }
        case 21: break;
        case 4: 
          { final String currText = yytext().toString();
                                             if (!currText.startsWith("%>")) {
                                                 return RHTML_COMMENT_CHARACTERS;
                                             } else {
                                                 yybegin(IN_RHTML_COMMENT_PROCESS_LINE_STATE);
                                                 yypushback(currText.length());
                                             }
          }
        case 22: break;
        case 10: 
          { yybegin(IN_RHTML_COMMENT_STATE);
                                             return RHTML_COMMENT_EOL;
          }
        case 23: break;
        case 6: 
          { yybegin(RHTML_SCRIPTLET_END_STATE);
                                             return OMIT_NEW_LINE;
          }
        case 24: break;
        case 9: 
          { yypushback(getTagLength(false, true));

                                             yybegin(IN_RHTML_COMMENT_PROCESS_LINE_STATE);
                                             final String currText = yytext().toString();
                                             final int curLen = currText.length();
                                             if (curLen != 0) {
                                               if (currText.trim().length() == 0) {
                                                   return RHTML_COMMENT_WSL;
                                               }
                                               if (!currText.startsWith("%>")) {
                                                   return RHTML_COMMENT_CHARACTERS;
                                               } else {
                                                   yypushback(curLen); 
                                               }
                                             }
          }
        case 25: break;
        case 17: 
          { yybegin(IN_RHTML_EXPRESSION_STATE);
                                             return RHTML_EXPRESSION_START;
          }
        case 26: break;
        case 20: 
          { yypushback(getTagLength(false, false));
                                              yybegin(RHTML_EXPRESSION_END_STATE);
                                              if (yytext().length() != 0) {
                                                return RUBY_CODE_CHARACTERS;
                                              }
          }
        case 27: break;
        case 15: 
          { yybegin(YYINITIAL);
                                             return RHTML_COMMENT_END;
          }
        case 28: break;
        case 13: 
          { yybegin(YYINITIAL);
                                             return RHTML_EXPRESSION_END;
          }
        case 29: break;
        case 19: 
          { yypushback(getTagLength(false, false));
                                              yybegin(RHTML_SCRIPTLET_END_STATE);
                                              String text = yytext().toString();
                                              if (text.startsWith( "%>")) {
                                                 yypushback(text.length());                                                 
                                              } else {
                                                 return RUBY_CODE_CHARACTERS;
                                              }
          }
        case 30: break;
        case 18: 
          { yybegin(IN_RHTML_COMMENT_STATE);
                                             return RHTML_COMMENT_START;
          }
        case 31: break;
        case 3: 
          { return RUBY_CODE_CHARACTERS;
          }
        case 32: break;
        case 14: 
          { yypushback(2);
                                             yybegin(RHTML_COMMENT_END_STATE);
          }
        case 33: break;
        case 1: 
          { return TEMPLATE_CHARACTERS_IN_RHTML;
          }
        case 34: break;
        case 2: 
          { String text = yytext().toString();
                                              if (text.startsWith( "%>")) {
                                                 yybegin(RHTML_SCRIPTLET_END_STATE);
                                                 yypushback(text.length());
                                              } else {
                                                 return RUBY_CODE_CHARACTERS;
                                              }
          }
        case 35: break;
        case 7: 
          { yybegin(IN_RHTML_SCRIPTLET_STATE);
                                             return OMIT_NEW_LINE;
          }
        case 36: break;
        case 12: 
          { yybegin(YYINITIAL);
                                             return RHTML_SCRIPTLET_END;
          }
        case 37: break;
        case 16: 
          { yybegin(RHTML_INJECTION_START_STATE);
                                             yypushback(getTagLength(true, false));
                                             if (yytext().length() != 0) {
                                               return TEMPLATE_CHARACTERS_IN_RHTML;
                                             }
          }
        case 38: break;
        case 8: 
          { yybegin(RHTML_EXPRESSION_END_STATE);
                                             return OMIT_NEW_LINE;
          }
        case 39: break;
        case 5: 
          { return FLEX_ERROR;
          }
        case 40: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
